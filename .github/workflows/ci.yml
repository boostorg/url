# Copyright 2020-2021 Peter Dimov
# Copyright 2021 Andrey Semashev
#
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://boost.org/LICENSE_1_0.txt)

name: CI

on:
  pull_request:
    branches:
      - master
      - develop
      - feature/**
  push:
    branches:
      - '*'

concurrency:
  group: ${{format('{0}:{1}', github.repository, github.ref)}}
  cancel-in-progress: true

env:
  GIT_FETCH_JOBS: 8
  NET_RETRY_COUNT: 5
  DEFAULT_BUILD_VARIANT: debug,release

jobs:
  build:
    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        include:
          # Latest
          - { name: 'GCC 11 (Latest): C++17-20', toolset: gcc-11, cxx: g++-11, cc: gcc-11, cxxstd: "17,20", os: ubuntu-22.04, install: [ g++-11 ], sources: [ "ppa:ubuntu-toolchain-r/test" ] }
          - { name: 'Clang 12 (Latest): C++17-20', toolset: clang, cxx: clang++-12, cc: clang-12, cxxstd: "17,20", os: ubuntu-22.04, install: [ clang-12 ] }
          - { name: 'MSVC 14.3 (Latest): C++17-20', toolset: msvc-14.3, cxxstd: "17,20", address-model: '32,64', os: windows-2022 }
          - { name: 'Clang 12 + libc++ (Latest): C++17-20', toolset: clang, cxx: clang++-12, cc: clang-12, cxxstd: "17,20", cxxflags: -stdlib=libc++, linkflags: -stdlib=libc++, os: ubuntu-20.04, install: [ clang-12, libc++-12-dev, libc++abi-12-dev ] }
          - { name: 'AppleClang (Latest): C++11-17', toolset: clang, cxxstd: "11,14,17", os: macos-11 }

          # Oldest
          - { name: 'GCC 4.8 (Oldest): C++11', toolset: gcc-4.8, cxx: g++-4.8, cc: gcc-4.8, cxxstd: "11", os: ubuntu-22.04, container: 'ubuntu:18.04', install: [ g++-4.8 ] }
          - { name: 'Clang 3.8 (Oldest): C++11', toolset: clang, cxx: clang++-3.8, cc: clang-3.8, cxxstd: "11", os: ubuntu-22.04, container: 'ubuntu:16.04', install: [ clang-3.8 ] }
          - { name: 'MSVC 14.2 (Oldest): C++14-17', toolset: msvc-14.2, cxxstd: "14,17", address-model: '32,64', os: windows-2019 }

          # Special
          - { name: 'UBSan (GCC 11: C++17-20)', toolset: gcc-11, cxx: g++-11, cc: gcc-11, cxxstd: "17,20", ubsan: true, os: ubuntu-22.04, install: [ g++-11 ], sources: [ "ppa:ubuntu-toolchain-r/test" ] }
          - { name: 'Shared (GCC)', generator: 'Unix Makefiles', os: ubuntu-22.04, build_shared: true, build_type: Debug, cmake: true }
          - { name: 'Shared (VS 2019)', toolset: msvc-14.2, generator: 'Visual Studio 16 2019', address-model: '32,64', cxxstd: "17,20", os: windows-2019, build_shared: true, build_type: Debug }
          - { name: 'Shared (VS 2022)', toolset: msvc-14.3, generator: 'Visual Studio 17 2022', address-model: '32,64', cxxstd: "17,20", os: windows-2022, build_shared: true, build_type: Debug }

          # GCC
          - { name: 'GCC 10: C++17', toolset: gcc-10, cxx: g++-10, cc: gcc-10, cxxstd: "17", os: ubuntu-22.04, install: [ g++-10 ] }
          - { name: 'GCC 9: C++17', toolset: gcc-9, cxx: g++-9, cc: gcc-9, cxxstd: "17", os: ubuntu-22.04, install: [ g++-9 ] }
          - { name: 'GCC 8: C++17', toolset: gcc-8, cxx: g++-8, cc: gcc-8, cxxstd: "17", os: ubuntu-22.04, container: 'ubuntu:18.04', install: [ g++-8 ] }
          - { name: 'GCC 7: C++14-17', toolset: gcc-7, cxx: g++-7, cc: gcc-7, cxxstd: "14,17", os: ubuntu-22.04, container: 'ubuntu:18.04', install: [ g++-7 ] }
          - { name: 'GCC 6: C++11-14', toolset: gcc-6, cxx: g++-6, cc: gcc-6, cxxstd: "11,14", os: ubuntu-22.04, container: 'ubuntu:18.04', install: [ g++-6 ] }
          - { name: 'GCC 5: C++11-14', toolset: gcc-5, cxx: g++-5, cc: gcc-5, cxxstd: "11,14", os: ubuntu-22.04, container: 'ubuntu:16.04', install: [ g++-5 ] }
          - { name: 'GCC 4.9: C++11', toolset: gcc-4.9, cxx: g++-4.9, cc: gcc-4.9, cxxstd: "11", os: ubuntu-22.04, container: 'ubuntu:16.04', install: [ g++-4.9 ] }

          # Clang
          - { name: 'Clang 11: C++14-17', toolset: clang, cxx: clang++-11, cc: clang-11, cxxstd: "14,17", os: ubuntu-20.04, install: [ clang-11 ] }
          - { name: 'Clang 10: C++14-17', toolset: clang, cxx: clang++-10, cc: clang-10, cxxstd: "14,17", os: ubuntu-20.04, install: [ clang-10 ] }
          - { name: 'Clang 9: C++14-17', toolset: clang, cxx: clang++-9, cc: clang-9, cxxstd: "14,17", os: ubuntu-22.04, container: 'ubuntu:18.04', install: [ clang-9 ] }
          - { name: 'Clang 8: C++17', toolset: clang, cxx: clang++-8, cc: clang-8, cxxstd: "17", os: ubuntu-22.04, container: 'ubuntu:18.04', install: [ clang-8, g++-7 ], gcc_toolchain: 7 }
          - { name: 'Clang 7: C++17', toolset: clang, cxx: clang++-7, cc: clang-7, cxxstd: "17", os: ubuntu-22.04, container: 'ubuntu:18.04', install: [ clang-7 ] }
          - { name: 'Clang 6.0: C++14-17', toolset: clang, cxx: clang++-6.0, cc: clang-6.0, cxxstd: "14,17", os: ubuntu-22.04, container: 'ubuntu:18.04', install: [ clang-6.0 ] }
          - { name: 'Clang 5.0: C++11-14', toolset: clang, cxx: clang++-5.0, cc: clang-5.0, cxxstd: "11,14", os: ubuntu-22.04, container: 'ubuntu:18.04', install: [ clang-5.0 ] }
          - { name: 'Clang 4.0: C++11-14', toolset: clang, cxx: clang++-4.0, cc: clang-4.0, cxxstd: "11,14", os: ubuntu-22.04, container: 'ubuntu:18.04', install: [ clang-4.0 ] }

    name: ${{ matrix.name }}
    timeout-minutes: 120
    runs-on: ${{matrix.os}}
    container: ${{matrix.container}}

    steps:
      - name: Clone Boost.URL
        uses: actions/checkout@v3

      - name: Install packages
        if: ${{ !startsWith(matrix.os, 'windows') && (matrix.container || matrix.install) }}
        uses: ./.github/actions/package_install
        id: package-install
        with:
          apt-get: ${{ join(matrix.install, ' ') }} ${{ matrix.container && 'sudo software-properties-common tzdata wget curl apt-transport-https make apt-file unzip libssl-dev build-essential autotools-dev autoconf automake g++ libc++-helpers python ruby cpio gcc-multilib g++-multilib pkgconf python3 ccache libpython-dev python3-distutils python3-pip git cmake' }}
          apt-get-ignore-missing: ${{ matrix.container && 'true' }}

      - name: Clone Boost
        uses: ./.github/actions/boost_clone
        with:
          boost_dir: ../boost-source
          branch: ${{ (github.ref_name == 'master' && github.ref_name) || 'develop' }}
          scan-modules-dir: .
          scan-modules-ignore: url

      - name: Patch Boost
        working-directory: ../boost-source
        id: patch
        shell: bash
        run: |
          set -xe
          module=${GITHUB_REPOSITORY#*/}
          echo "module=$module" >> $GITHUB_OUTPUT
          workspace_root=$(echo "$GITHUB_WORKSPACE" | sed 's/\\/\//g')
          rm -r "libs/$module" || true
          cd ..
          mkdir boost-root || true
          cp -r "boost-source"/* "boost-root"
          cd boost-root
          mkdir "libs/$module"
          cp -r "$workspace_root"/* "libs/$module"
          cxxstd=${{ matrix.cxxstd }}
          latest_std=$(echo $cxxstd | awk -F ',' '{print $NF}')
          echo "latest_std=$latest_std" >> $GITHUB_OUTPUT

      - name: Boost Workflow
        uses: ./.github/actions/cmake_workflow
        with:
          source-dir: ../boost-root
          build-dir: __build_cmake_test__
          generator: ${{ matrix.generator }}
          build-type: ${{ matrix.build_type || 'Debug' }}
          build-target: tests boost_url_tests boost_url_limits boost_url_extra
          run-tests: true
          install-prefix: $GITHUB_WORKSPACE/.local
          cxxstd: ${{ steps.patch.outputs.latest_std }}
          cxx: ${{ matrix.cxx }}
          cc: ${{ matrix.cc }}
          cmake-min-version: 3.15 # min-version with cmake --install
          extra-args: ${{ format('-D Boost_VERBOSE=ON -D BOOST_INCLUDE_LIBRARIES={0} -D BUILD_SHARED_LIBS={1}', steps.patch.outputs.module, (matrix.build_shared && 'ON') || 'OFF') }}
          ref-source-dir: ../boost-root/libs/url

      - name: Subdir Workflow
        uses: ./.github/actions/cmake_workflow
        with:
          source-dir: ../boost-root/libs/${{ steps.patch.outputs.module }}/test/cmake_test
          build-dir: __build_cmake_subdir_test__
          generator: ${{ matrix.generator }}
          build-type: ${{ matrix.build_type || 'Debug' }}
          cxxstd: ${{ steps.patch.outputs.latest_std }}
          cxx: ${{ matrix.cxx }}
          cc: ${{ matrix.cc }}
          install: false
          cmake-min-version: 3.11
          extra-args: ${{ format('-D BOOST_CI_INSTALL_TEST=OFF -D BUILD_SHARED_LIBS={0}', (matrix.build_shared && 'ON') || 'OFF') }}
          ref-source-dir: ../boost-root/libs/url/test/cmake_test

      - name: Package Workflow
        uses: ./.github/actions/cmake_workflow
        with:
          source-dir: ../boost-root/libs/${{ steps.patch.outputs.module }}/test/cmake_test
          build-dir: __build_cmake_install_test__
          generator: ${{ matrix.generator }}
          build-type: ${{ matrix.build_type || 'Debug' }}
          cxxstd: ${{ steps.patch.outputs.latest_std }}
          cxx: ${{ matrix.cxx }}
          cc: ${{ matrix.cc }}
          install: false
          extra-args: ${{ format('-D BOOST_CI_INSTALL_TEST=ON -D CMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/.local -D BUILD_SHARED_LIBS={0}', (matrix.build_shared && 'ON') || 'OFF') }}
          ref-source-dir: ../boost-root/libs/url/test/cmake_test

      - name: Root Workflow
        uses: ./.github/actions/cmake_workflow
        with:
          source-dir: .
          build-dir: __build_root_test__
          generator: ${{ matrix.generator }}
          build-type: ${{ matrix.build_type || 'Debug' }}
          build-target: tests boost_url_tests boost_url_limits boost_url_extra
          run-tests: false
          install: false
          cxxstd: ${{ steps.patch.outputs.latest_std }}
          cxx: ${{ matrix.cxx }}
          cc: ${{ matrix.cc }}
          extra-args: ${{ format('-D Boost_VERBOSE=ON -D BUILD_TESTING=ON -D BUILD_SHARED_LIBS={0} -D BOOST_SRC_DIR="../boost-root"', (matrix.build_shared && 'ON') || 'OFF') }}
          ref-source-dir: ../boost-root/libs/url

      - name: Release Workflow
        uses: ./.github/actions/b2_workflow
        with:
          source-dir: ../boost-root
          modules: url
          toolset: ${{ matrix.toolset }}
          cxx: ${{ (startsWith(matrix.cxx, 'clang') && matrix.cxx) || '' }}
          cxxstd: ${{ matrix.cxxstd }}
          cxxflags: ${{ matrix.cxxflags }}
          linkflags: ${{ matrix.linkflags }}
          address-model: ${{ matrix.address-model }}
          ubsan: ${{ matrix.ubsan }}
          gcc_toolchain: ${{ matrix.gcc_toolchain }}
