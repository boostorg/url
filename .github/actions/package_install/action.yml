name: 'Install dependencies'
description: 'This actions installs dependencies from multiple package managers for a workflow'
inputs:
  vcpkg:
    description: 'List of packages we should install with vcpkg. (Whitespace-separated)'
    required: false
    default: ''
  apt-get:
    description: 'List of packages we should install with apt-get. (Whitespace-separated)'
    required: false
    default: ''

  vcpkg_triplet:
    description: 'The triplet used by vcpkg to install packages.'
    required: false
    default: ''
  vcpkg_dir:
    description: 'The directory where vcpkg should be cloned and installed.'
    required: false
    default: 'vcpkg'
  vcpkg_branch:
    description: 'vcpkg branch we should use'
    required: false
    default: 'master'

  apt-get-retries:
    description: 'Number of time we should retry when apt-get fails.'
    required: false
    default: '1'
  apt-get-sources:
    description: 'List of sources for apt-get.'
    required: false
    default: ''
  apt-get-source-keys:
    description: 'List of source keys for apt-get.'
    required: false
    default: ''
  apt-get-ignore-missing:
    description: 'Whether apt-get should ignore missing packages.'
    required: false
    default: 'false'


outputs:
  vcpkg_toolchain:
    description: "vcpkg toolchain file"
    value: ${{ steps.ctx.outputs.vcpkg_toolchain }}

runs:
  using: "composite"
  steps:
    # Install packages on ubuntu
    # https://docs.github.com/en/actions/learn-github-actions/contexts#runner-context
    - name: apt-get packages
      shell: bash
      if: ${{ runner.os == 'Linux' && inputs.apt-get }}
      run: |
        set -xe
        
        # Determine if apt-get should be called with `sudo`, which is often not the case with containers
        if which sudo >/dev/null 2>&1; then
          sudo -n apt-get -o Acquire::Retries=${{ inputs.apt-get-retries }} update > /dev/null 2>&1
          if [ $? -eq 0 ]
          then
            sudo_prefix="sudo "
          else
            sudo_prefix=""
          fi
        else
          sudo_prefix=""
        fi
        
        # Install sources
        SOURCE_KEYS=(${{ inputs.apt-get-source-keys }})
        for key in "${SOURCE_KEYS[@]}"
        do
            for i in {1..$NET_RETRY_COUNT}
            do
                wget -O - "$key" | sudo apt-key add - && break || sleep 2
            done
        done
        
        SOURCES=(${{ inputs.apt-get-sources }})
        if [ ${#SOURCES[@]} -gt 0 ]
        then
            APT_ADD_REPO_COMMON_ARGS=("-y")
            APT_ADD_REPO_HAS_SOURCE_ARGS=0
            SOFTWARE_PROPERTIES_VERSION="$(dpkg-query --showformat='${Version}' --show software-properties-common)"
            if dpkg --compare-versions "$SOFTWARE_PROPERTIES_VERSION" ge "0.96.24.20"
            then
                APT_ADD_REPO_COMMON_ARGS+=("-n")
            fi
            if dpkg --compare-versions "$SOFTWARE_PROPERTIES_VERSION" ge "0.98.10"
            then
                APT_ADD_REPO_HAS_SOURCE_ARGS=1
            fi
            for source in "${SOURCES[@]}"
            do
                for i in {1..$NET_RETRY_COUNT}
                do
                    APT_ADD_REPO_ARGS=("${APT_ADD_REPO_COMMON_ARGS[@]}")
                    if [ $APT_ADD_REPO_HAS_SOURCE_ARGS -ne 0 ]
                    then
                        case "$source" in
                        "ppa:"*)
                            APT_ADD_REPO_ARGS+=("-P")
                            ;;
                        "deb "*)
                            APT_ADD_REPO_ARGS+=("-S")
                            ;;
                        *)
                            APT_ADD_REPO_ARGS+=("-U")
                            ;;
                        esac
                    fi
                    APT_ADD_REPO_ARGS+=("$source")
                    $sudo_prefix -E apt-add-repository "${APT_ADD_REPO_ARGS[@]}" && break || sleep 2
                done
            done
        fi
        
        # Update and install
        $sudo_prefix apt-get -o Acquire::Retries=${{ inputs.apt-get-retries }} update
        if [ "${{ inputs.apt-get-ignore-missing }}" == "true" ]; then
            apt_get_packages="${{ inputs.apt-get }}"
            for package in ${apt_get_packages// / }
            do
              $sudo_prefix apt-get -o Acquire::Retries=${{ inputs.apt-get-retries }} install --ignore-missing -y $package || true
            done
        else
            $sudo_prefix apt-get -o Acquire::Retries=${{ inputs.apt-get-retries }} install -y ${{ inputs.apt-get }} 
        fi
        
    - name: vcpkg environment
      id: ctx
      if: ${{ inputs.vcpkg }}
      shell: bash
      run: |
        set -xe
        
        # vcpkg hash
        vcpkg_hash="$(git ls-remote https://github.com/microsoft/vcpkg.git ${{ inputs.vcpkg_branch }} | awk '{ print $1 }')"
        echo "vcpkg_hash=$vcpkg_hash" >> $GITHUB_OUTPUT
        
        # vcpkg triplet
        default_triplet="${{ (runner.os == 'Windows' && 'x64-windows') || (runner.os == 'Linux' && 'x64-linux') || (runner.os == 'macOS' && 'x64-osx') || '' }}"
        input_triplet=${{ inputs.vcpkg_triplet }}
        if [ "$input_triplet" == "" ]; then
            triplet=$default_triplet
        else
            triplet=$input_triplet 
        fi
        echo "triplet=$triplet" >> $GITHUB_OUTPUT
        if [ "$triplet" == "" ]; then
            triplet_suffix=""
        else
            triplet_suffix=":$triplet" 
        fi
        echo "triplet_suffix=$triplet_suffix" >> $GITHUB_OUTPUT
        
        # vcpkg executable
        vcpkg_target_dir=${{ inputs.vcpkg_dir }}
        if [[ $vcpkg_target_dir == /* ]]; then
            vcpkg_exec_path=$vcpkg_target_dir
        else
            vcpkg_exec_path=./$vcpkg_target_dir
        fi
        vcpkg_bs_exe="${{ (runner.os == 'Windows' && '$vcpkg_exec_path/bootstrap-vcpkg.bat') || '$vcpkg_exec_path/bootstrap-vcpkg.sh' }}"
        echo "vcpkg_bs_exe=$vcpkg_bs_exe" >> $GITHUB_OUTPUT
        
        # vcpkg toolchain
        vcpkg_toolchain=$vcpkg_exec_path/scripts/buildsystems/vcpkg.cmake
        echo "vcpkg_toolchain=$vcpkg_toolchain" >> $GITHUB_OUTPUT
        
        # vcpkg cache hash
        vcpkg_cache_hash="${{ runner.os }}-$vcpkg_hash$triplet_suffix"
        vcpkg_packages=${{ inputs.vcpkg }}
        for package in ${vcpkg_packages// / }
        do
            vcpkg_cache_hash=$vcpkg_cache_hash-$package
        done
        echo "vcpkg_cache_hash=$vcpkg_cache_hash" >> $GITHUB_OUTPUT

    # Attempt to get vcpkg with its packages from the cache before cloning it
    # The cache key includes the vcpkg version, os, packages and triplet
    - name: vcpkg cache
      if: ${{ inputs.vcpkg }}
      id: cache-vcpkg
      uses: actions/cache@v3
      with:
        path: ${{ inputs.vcpkg_dir }}
        key: ${{ steps.ctx.outputs.vcpkg_cache_hash }}

    - name: vcpkg install
      if: steps.cache-vcpkg.outputs.cache-hit != 'true' && inputs.vcpkg != ''
      shell: bash
      run: |
        set -xe
        git clone https://github.com/microsoft/vcpkg.git -b ${{ inputs.vcpkg_branch }} ${{ inputs.vcpkg_dir }}
        ${{ steps.ctx.outputs.vcpkg_bs_exe }}
        cd ${{ inputs.vcpkg_dir }}
        packages=${{ inputs.vcpkg }}
        for package in ${packages// / }
        do
          vcpkg install $package${{ steps.ctx.outputs.triplet_suffix }}
        done