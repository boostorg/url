[/
    Copyright (c) 2019 Vinnie Falco (vinnie.falco@gmail.com)

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

    Official repository: https://github.com/boostorg/url
]

[/-----------------------------------------------------------------------------]

[section Authority]

The authority determines how a resource can be accessed.
It contains two parts: the
[@https://www.rfc-editor.org/rfc/rfc3986#section-3.2.1 ['userinfo]]
that holds identity credentials, and the
[@https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.2 ['host]]
and
[@https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.3 ['port]]
which identify a communication endpoint having dominion
over the resource described in the remainder of the URL.

[$url/images/AuthorityDiagram.svg]

Some observations:

* The use of the password field is deprecated.
* The authority always has a defined host field, even if empty.
* The host can be a name, or an IPv4, an IPv6, or an IPvFuture address.
* All but the port field use percent-encoding to escape delimiters.

The function [link url.ref.boost__urls__url_view.authority `authority`] can
be used to obtain the __authority_view__ from a __url_view__:

[snippet_parsing_authority_3a]

Notice that [link url.ref.boost__urls__url_view.authority `authority`]
does not return a __decode_view__. The reason is any decoded character
`/` could make it ambiguous with the path component. The authority
is represented through an __authority_view__, a read-only container
to a non-owning character buffer containing a valid authority.

An __authority_view__ has functions for obtaining its subcomponents:

[snippet_parsing_authority_3b]

These functions do not throw. If the URL has no authority,
[link url.ref.boost__urls__url_view.authority `authority`]
returns an empty __authority_view__.
The function
[link url.ref.boost__urls__url_view.has_authority `has_authority`]
can be used to check whether this empty authority means
there is no authority or an empty authority in the URL.

In contexts where an authority can appear by itself, an __authority_view__
can be constructed directly from a string.
For instance, the grammar for the
[@https://datatracker.ietf.org/doc/html/rfc7230#section-3.1.1 ['request-target]]
of an `HTTP/1 CONNECT` request uses
[@https://datatracker.ietf.org/doc/html/rfc7230#section-5.3.3 ['authority-form]].
This is what such a request looks like:

[teletype]
```
     CONNECT www.example.com:80 HTTP/1.1
```

In that case, we have an authority that cannot be parsed directly
with __parse_uri__ as a URL. Instead, we can use the analogous function
[link url.ref.boost__urls__parse_authority `parse_authority`] to
obtain an __authority_view__.

[snippet_parsing_authority_12]

The authority view provides the subset of observer member functions found in
__url_view__ which are relevant to the authority. However, when an authority
is parsed on its own, the leading double slashes ("//") are not present.

Authority string with `userinfo` are also valid for
[link url.ref.boost__urls__parse_authority `parse_authority`]:

[snippet_parsing_authority_13]



[heading Host]

The host subcomponent represents where resources
are located. The functions
[link url.ref.boost__urls__url_view.host `host`]
and [link url.ref.boost__urls__url_view.port `port`]
can be used to obtain the host from a __url_view__
or __authority_view__:

The host might be a registered name

[snippet_parsing_authority_8]

or an IP address

[snippet_parsing_authority_9]

Although this is not mandatory, note that the encoded host is rarely
different from its encoded counterpart.

[snippet_parsing_authority_9b]

Registered names usually need to be handled differently from IP addresses.
The function
[link url.ref.boost__urls__url_view.host_type `host_type`]
can be used to identify which type of host is described in the URL.

[c++]
[snippet_parsing_authority_10]

When the [link url.ref.boost__urls__url_view.host_type `host_type`]
matches an IP address, the functions
[link url.ref.boost__urls__url_view_base.host_ipv4_address `host_ipv4_address`],
[link url.ref.boost__urls__url_view_base.host_ipv6_address `host_ipv6_address`]
can be used to obtain the decoded addresses as integers.

[note
    Note that if an authority is present, the host is always
    defined even if it is the empty string (corresponding
    to a zero-length ['reg-name] in the BNF).

    [snippet_parsing_authority_10a]
]

The authority component also influences how we should
interpret the URL path. If the authority is present,
the path component must either be empty or begin with
a slash. This is a common pattern where the path is
empty:

[snippet_parsing_authority_10b]

When both the authority and path exist, the path
must begin with a slash:

[snippet_parsing_authority_10c]

This rule also affects the path "`/`":

[snippet_parsing_authority_10d]

When there is no authority component, the path
cannot begin with an empty segment. This means
the path cannot begin with two slashes `//` to
avoid these characters being interpreted as the
beginning of the authority component. For
instance, consider the following valid URL:

[snippet_parsing_authority_10d]

Note that including a double slash would make the
path be interpreted as the authority:

[snippet_parsing_authority_10f]

[heading Userinfo]

In complete authority components, we can also extract
the `userinfo` and `port` subcomponents.

[snippet_parsing_authority_11a]

When not treated as an opaque field, the optional
`userinfo` subcomponent consists of a user name
and an optional password. Analogous functions are
provided for the userinfo subcomponents.

[snippet_parsing_authority_11b]

Analogous to other observers, the functions
[link url.ref.boost__urls__url_view.has_userinfo `has_userinfo`] and
[link url.ref.boost__urls__url_view.has_password `has_password`] are provided
to differentiate empty components from absent components.
Note that there is no function `has_user`. The user component is available
whenever `userinfo` exists.

[note Although the specification allows the format `username:password`,
the password component should be used with care.

It is not recommended to transfer password data through URLs
unless this is an empty string indicating no password.]


[endsect]
