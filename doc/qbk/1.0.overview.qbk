[/
    Copyright (c) 2021 Vinnie Falco (vinnie.falco@gmail.com)
    Copyright (c) 2022 Alan Freitas (alandefreitas@gmail.com)

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

    Official repository: https://github.com/CPPAlliance/url
]

[section Overview]
[block'''<?dbhtml stop-chunking?>''']

[/-----------------------------------------------------------------------------]

Boost.URL is a portable C++ library which provides containers and algorithms
which model a "URL", more formally described using the
[@https://datatracker.ietf.org/doc/html/rfc3986 Uniform Resource Identifier (URI)]
specification (henceforth referred to as __rfc3986__). A URL is a compact sequence
of characters that identifies an abstract or physical resource. For example,
this is a valid URL which satisfies the ['absolute-URI] grammar:

[teletype]
```
    https://www.example.com/path/to/file.txt?userid=1001&page=2&results=full
```

This library understands the various grammars related to URLs and provides
functionalities for:

* Validating and parsing of strings,
* Manipulation of URL strings, and
* Algorithms such as normalization and resolution.

[heading Features]

While the library is general purpose, special care has been taken to ensure
that the implementation and data representation are friendly to network
programs which need to handle URLs efficiently and securely, including the
case where the inputs come from untrusted sources.

Interfaces are provided for using error codes instead of exceptions as needed,
and all algorithms provide a mechanism for avoiding memory allocations entirely
if desired. Another feature of the library is that all container mutations
leave the URL in a valid state. Code which uses Boost.URL will be easy to
read, flexible, and performant.

Boost.URL offers these features:

* Require only C++11
* Works without exceptions
* Fast compilation, no templates
* Strict compliance with __rfc3986__
* Allocator control, including avoiding allocation entirely
* Optional header-only, without linking to a library
* Supports `-fno-exceptions`, detected automatically
* Link to a built static or dynamic Boost library, or use header-only
* Work well on embedded devices

[/-----------------------------------------------------------------------------]

[section Requirements]

The library requires Boost 1.80.0 and a compiler supporting at least C++11.

[note
    Boost [*1.80.0] or higher is a requirement for installation of this library proposal.
]

Aliases for standard types, such as __error_code__ or __string_view__,
use their Boost equivalents.

[heading Header-Only]

To use the library as header-only; that is, to eliminate the requirement
to link a program to a static or dynamic Boost.URL library, simply place
the following line in [*exactly one] source file in your project.

[c++]
```
    #include <boost/url/src.hpp>
```

[heading CMake]

The library can work both as a module of the Boost super-project or as an
independent library that depends on Boost 1.78.0. In both cases,
the target is available as `boost_url`.

When the library is not a subdirectory of the Boost super-project, the
Boost libraries will be located with `find_package`, regardless of
whether it is the root library or not. This behavior can be explicitly
controlled by setting the variable `BOOST_URL_FIND_PACKAGE_BOOST`.

This allows the library to be compiled independently as the root project,
as part of the Boost super-project, or as a dependency with
`add_subdirectory` or `FetchContent`.

[#embedded-devices]
[heading Embedded]

Boost.URL works great on embedded devices. It can be used in a
way that avoids all dynamic memory allocations. Furthermore it
is designed to work without exceptions if desired.

[endsect]

[/-----------------------------------------------------------------------------]

[heading Tested Compilers]

Boost.URL has been tested with the following compilers:

* clang: 3.8, 4, 5, 6, 7, 8, 9, 10, 11, 12
* gcc: 4.8, 4.9, 5, 6, 7, 8, 9, 10, 11
* msvc: 14.0, 14.1, 14.2, 14.3

and these architectures: x86, x64, ARM64, S390x.

[heading Quality Assurance]

The development infrastructure for the library includes
these per-commit analyses:

* Coverage reports
* Compilation and tests on Drone.io and GitHub Actions
* Fuzzing using clang-llvm and machine learning
* Regular code audits for security

[/-----------------------------------------------------------------------------]

[section Nomenclature]

Various names have been used historically to refer to different
flavors of resource identifiers, including ['URI], ['URL],
and ['URN]. Over time, the distinction between URIs and URLs
has disappeared when discussed in technical documents and
informal works. In this library we use the term [*URL] to
refer to all strings which are valid according to the
top-level grammar rules found in __rfc3986__.

[endsect]

[heading ABNF]

This documentation uses the Augmented
[@https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form Backus-Naur Form]
(ABNF) notation of
[@https://datatracker.ietf.org/doc/html/rfc5234 rfc5234]
to specify particular grammars used by algorithms and containers. While
a complete understanding of the notation is not a requirement for using
the library, it may help for an understanding of how valid components of
URLs are defined. In particular, this will be of interest to users who
wish to compose parsing algorithms using the combinators provided by
the library.

[/-----------------------------------------------------------------------------]

[section:security_review Security Review (Bishop Fox)]
To be announced
[endsect]

[heading Acknowledgments]

This library wouldn't be where it is today without the help of
[@https://github.com/pdimov Peter Dimov]
for design advice and general assistance.

[/-----------------------------------------------------------------------------]

[endsect]
