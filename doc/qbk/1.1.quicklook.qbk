[/
    Copyright (c) 2021  Vinnie Falco (vinnie.falco@gmail.com)

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

    Official repository: https://github.com/CPPAlliance/url
]

[section:quick_look Quick Look]

This section is intended to give the reader a brief overview of the features
and interface style of the library.

Say you have the following URL that you want to parse:

[teletype]
```
    https://user:pass@www.example.com:443/path/to/my%2dfile.txt?id=42&name=John%20Doe#anchor
```

You can parse it by calling this function:
```
    ``__url_view__`` u = ``__parse_uri__``( "https://user:pass@www.example.com:443/path/to/my%2dfile.txt?id=42&name=John%Doe#anchor" ).value();
```

The function __parse_uri__ returns an object of type __result__ which is a
container resembling a variant that holds either an error or an object.
In this case we immediately call `result::value` which throws an exception
on a parsing error, otherwise returns an instance of __url_view__ which holds
the parsed result.

It is worth noting that __parse_uri__ allocates no memory and throws no
exceptions. Like a string view, the __url_view__ does not retain ownership
of the underlying string buffer. Constructed URL views always contain a
valid URL in its correctly serialized form. Accessing the parts of the URL
is easy:
[table [[Code][Output]] [[
```
    std::cout <<
        "scheme    : " << u.``[link url.ref.boost__urls__url_view.scheme `scheme`]``() << "\n" <<
        "authority : " << u.``[link url.ref.boost__urls__url_view.encoded_authority `encoded_authority`]``() << "\n" <<
        "path      : " << u.``[link url.ref.boost__urls__url_view.encoded_path `encoded_path`]``() << "\n" <<
        "query     : " << u.``[link url.ref.boost__urls__url_view.encoded_query `encoded_query`]``() << "\n" <<
        "fragment  : " << u.``[link url.ref.boost__urls__url_view.encoded_fragment `encoded_fragment`]``() << "\n";
```
][
```
    scheme    : https
    authority : user:pass@www.example.com:443
    path      : /path/to/my%2dfile.txt
    query     : id=42&name=John%20Doe
    fragment  : anchor
```
]]]

Functions like
[link url.ref.boost__urls__url_view.encoded_query `encoded_query`]
return string views, simply referencing the relevant portion of the
URL string without the need to allocate memory. To get a decoded string,
call the same function without the word encoded:
[table [[Code][Output]] [[
```
    std::cout << "query : " << u.``[link url.ref.boost__urls__url_view.query `query`]``() << "\n";
```
][
```
    query : John Doe
```
]]]

The function `query` returns a __string_value__, which is a library type
that models a read-only string with ownership of the underlying buffer,
which uses a type-erased allocator. All functions which return string
values accept an optional __Allocator__ parameter when when omitted,
defaults to the standard allocator. Here is the same code which prints
the path with percent-decoding applied, except using a local stack-based
allocator instead of the heap:
```
    ``__static_pool__``< 1024 > sp;

    std::cout << "query : " << u.query( sp.allocator() ) << "\n";
```

The __static_pool__ type is provided by the library and can be used to
apply percent-decoding to strings.

The path and query parts of the URL are treated specially by the library.
While they can be accessed as individual strings, they can also be
accessed through special containers which act like forward or bidirectional
ranges. This code calls
[link url.ref.boost__urls__url_view.encoded_segments `encoded_segments`]
to obtain the path segments as a container that returns encoded strings:
[table [[Code][Output]] [[
```
    ``[link url.ref.boost__urls__segments_encoded_view `segments_encoded_view`]`` segs = u.``[link url.ref.boost__urls__url_view.encoded_segments `encoded_segments`]``();

    for( auto v : segs )
    {
        std::cout << *v << "\n";
    }
```
][
```
    path
    to
    my%2dfile.txt
```
]]]

as with other __url_view__ functions which return encoded strings, the encoded
segments container does not allocate memory. Instead it returns views to the
corresponding portions of the underlying encoded buffer referenced by the URL.
Alternatively, the function
[link url.ref.boost__urls__url_view.segments `segments`]
may be called to obtain the path segments as strings with percent-decoding
applied, which requires allocating memory. With no arguments the container
returns strings using the default allocator:
[table [[Code][Output]] [[
```
    ``[link url.ref.boost__urls__segments_view `segments_view`]`` segs = u.``[link url.ref.boost__urls__url_view.segments `segments`]``();

    for( auto v : segs )
    {
        std::cout << *v << "\n";
    }
```
][
```
    path
    to
    my-file.txt
```
]]]

Memory allocations can be avoided entirely by passing a suitable allocator
when acquiring the container:
```
    static_pool< 1024 > pool;

    ``[link url.ref.boost__urls__segments_view `segments_view`]`` segs = u.``[link url.ref.boost__urls__url_view.segments `segments`]``( pool.allocator() );

    for( auto v : segs )
    {
        std::cout << *v << "\n";
    }
```

The query parameters can be accessed similarly, Here we access the parameters
as percent-encoded key and value pair strings:

[table [[Code][Output]] [[
```
    ``[link url.ref.boost__urls__params_encoded_view `params_encoded_view`]`` params = u.``[link url.ref.boost__urls__url_view.encoded_params `encoded_params`]``();

    for( auto v : params )
    {
        std::cout <<
            "key = " << v.key <<
            ", value = " << v.value << "\n";
    }
```
][
```
    key = id, value = 42
    key = name, value = John%20Doe
```
]]]

Obtaining encoded strings from URLs never needs to allocate memory. Here we
obtain the query parameters as allocated strings with percent-decoding applied,
using a stack-based allocator which does not use the heap:
[table [[Code][Output]] [[
```
    static_pool< 1024 > pool;

    ``[link url.ref.boost__urls__params_view `params_view`]`` params = u.``[link url.ref.boost__urls__url_view.params `params`]``( pool.allocator() );

    for( auto v : params )
    {
        std::cout <<
            "key = " << v.key <<
            ", value = " << v.value << "\n";
    }
```
][
```
    key = id, value = 42
    key = name, value = John Doe
```
]]]

[/-----------------------------------------------------------------------------]

[heading Modification]

The library provides the container __url__ for supporting modification of the
contents of a URL. Unlike the __url_view__, which does not gain ownership of
the underlying character buffer, the __url__ container uses the default
allocator to control a resizable character buffer which it owns. A __url__
cannot be constructed directly from a string. Instead it must be constructed
from an existing __url_view__. For example using a parse function:
```
    ``__url__`` u = ``__parse_uri__``( "http://user:pass@www.example.com:443/path/to/my%2dfile.txt?id=42&name=John%Doe#anchor" ).value();
```

Objects of type __url__ are first-class. They can be copied, moved, and
assigned as needed. They support all of the inspection functions of
__url_view__, and also provide functions to modify all parts of the URL.
Changing the scheme is easy:
```
    u.set_scheme( "https" );
```

Or we can use a predefined constant:
```
    u.set_scheme( scheme::https ); // equivalent to u.set_scheme( "https" );
```

The scheme must be valid, however, or else an exception is thrown:
```
    try
    {
        u.set_scheme( "100" ); // illegal, must start with a letter
    }
    catch( std::invalid_argument const& )
    {
        // this happens
    }
```

All modification functions perform validation on their input. Attemping
to set part of the URL to an invalid string will result in an exception.
It is not possible for a __url__ to hold a syntactically illegal text.
Modification functions return a reference to the object, so chaining
is possible:
```
    u.set_host( make_ipv4_address( "192.168.0.1" ) )
     .set_port( 8080 )
     .remove_userinfo();
```

All non-const operations offer the strong exception safety guarantee. The
path segment and query parameter containers returned by __url__ offer
modifiable range functionality, using member functions of the container.


[endsect]
