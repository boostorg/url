[/
    Copyright (c) 2019 Vinnie Falco (vinnie.falco@gmail.com)

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

    Official repository: https://github.com/CPPAlliance/url
]

[/-----------------------------------------------------------------------------]

[section Query]

The query component of a URL contains non-hierarchical data which augments the
information in the path to identify a resource within the scope of the URL's
scheme and authority (if any). A query is indicated by a leading question
mark ('?') character  as seen in the BNF below:

[table Query BNF [[
```
    query           = *( pchar / "/" / "?" )

    absolute-URI    = scheme ":" hier-part [ "?" query ]

    relative-ref    = relative-part [ "?" query ] [ "#" fragment ]

    URI             = scheme ":" hier-part [ "?" query ] [ "#" fragment ]

    URI-reference   = URI / relative-ref
```
]]]

The most common formulation for the query in a URL is to define a set of
key and value pairs of percent-encoded strings, using the ampersand ('&')
character to delimit each pair after the first. In contexts where a query
is interpreted as key/value pairs, it is called the ['query parameters],
['query params], or just [*params]. In addition to accessor functions
which treat the query as a single string, this library provides
container adaptors modeling ranges of query parameters. The
following URL contains three query parameters:
```
    https://www.example.com/get-customer.php?id=409&name=Joe&individual
```

A query parameter has an optional key and an optional value. This means
that a query parameter may be completely empty. In this case the parameter
is said to have a zero-length or empty key, and no value.
The presence of a value is indicated by the presence of an equals ('=')
sign appearing after the key. The value may be zero length or empty, or
it may contain characters. The URL below demonstrate all the ways that
keys and values may appear in query parameters:
```
    ?key-1=value-1&key-2=&key-3&=value-2
```

This table shows the BNF for query parameters:

[table Query Params BNF [[
```
    query-params    = query-param *( "&" query-param )

    query-param     = key [ "=" value ]

    key             = *qpchar
    value           = *( qpchar / "=" )

    qpchar          = unreserved
                    / pct-encoded
                    / "!" / "$" / "'" / "(" / ")"
                    / "*" / "+" / "," / ";"
                    / ":" / "@" / "/" / "?"
```
]]]

The functions for interacting with the query in a __url_view__ are as follows:

[table Query Observers [
    [Function]
    [Description]
][
    [[link url.ref.boost__urls__url_view.encoded_params `encoded_params`]]
    [Return the query parameters as a read-only container of percent-encoded strings.]
][
    [[link url.ref.boost__urls__url_view.encoded_query `encoded_query`]]
    [Return the percent-encoded query.]
][
    [[link url.ref.boost__urls__url_view.has_query `has_query`]]
    [Return true if a query is present]
][
    [[link url.ref.boost__urls__url_view.params `params`]]
    [Return the query parameters as a read-only container of strings with percent-decoding applied.]
][
    [[link url.ref.boost__urls__url_view.query `query`]]
    [Return the query as a string with percent-decoding applied.]
]]

[/-----------------------------------------------------------------------------]

[endsect]
