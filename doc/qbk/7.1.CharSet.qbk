[/
    Copyright (c) 2021 Vinnie Falco (vinnie.falco@gmail.com)

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

    Official repository: https://github.com/CPPAlliance/url
]

[section:charset CharSet]

A ['CharSet] is a unary predicate which accepts as its single
argument a value of type `char`. The return value of the predicate
is a `bool` whose value is true if the character is a member of the
notional character set, or false otherwise.

[snippet_charset_1]

The library provides a number of ['CharSet] predicates related to
URL components.

[snippet_charset_2]

A character set are used to specify which characters are unreserved
in a grammar rules. In URLs, they determine which characters do not
need to be escaped in percent-encoding algorithms.

[table [[Code][Output]] [[
[c++]
[snippet_charset_3]
][
[teletype]
```
    query:        key=the%20value
    decoded size: 13
```
]]]

Character sets may also be used directly by parsers; some character sets
have optimized implementations for finding matching elements.

[heading Related Identifiers]

* [link url.ref.boost__urls__grammar__is_charset `is_charset`]
* [link url.ref.boost__urls__grammar__find_if `find_if`]
* [link url.ref.boost__urls__grammar__find_if_not `find_if_not`]

[heading Requirements]

In this table:

* `T` is a type meeting the requirements of ['CharSet]
* `t` is a `const` value of type `T`
* `c` is a value of type `char`
* `first`, `last` are values of type `char const*`

[table Valid expressions
[[Expression] [Type] [Semantics, Pre/Post-conditions]]
[
    [`t(c);`]
    [`bool`]
    [
        This function returns `true` if `c` is a member of
        the character set, otherwise it returns `false`.
    ]
][
    [
    ```
    t.find_if(first,last)
    ```
    ]
    [`char const*`]
    [
        This optional member function examines the valid
        range of characters in `[first, last)` and returns
        a pointer to the first occurrence of a character 
        which is in the set, or returns `last` if no such
        character.

        The implementation of
        [link url.ref.boost__urls__grammar__find_if `find_if`]
        will call this function if provided by the character
        set, allowing optimized or otherwise performant
        implementations to be developed. If this member
        function is not provided, a default implementation
        is used which calls `operator()`.
    ]
][
    [
    ```
    t.find_if_not(first,last)
    ```
    ]
    [`char const*`]
    [
        This optional member function examines the valid
        range of characters in `[first, last)` and returns
        a pointer to the first occurrence of a character 
        which is not in the set, or returns `last` if no
        such character.

        The implementation of
        [link url.ref.boost__urls__grammar__find_if_not `find_if_not`]
        will call this function if provided by the character
        set, allowing optimized or otherwise performant
        implementations to be developed. If this member
        function is not provided, a default implementation
        is used which calls `operator()`.
    ]
]]

[heading Exemplar]

[snippet_charset_4]

[heading Models]

* [link url.ref.boost__urls__grammar__all_chars `grammar::all_chars`]
* [link url.ref.boost__urls__grammar__alnum_chars `grammar::alnum_chars`]
* [link url.ref.boost__urls__grammar__alpha_chars `grammar::alpha_chars`]
* [link url.ref.boost__urls__grammar__digit_chars `grammar::digit_chars`]
* [link url.ref.boost__urls__grammar__hexdig_chars `grammar::hexdig_chars`]
* [link url.ref.boost__urls__grammar__lut_chars `grammar::lut_chars`]

[endsect]
