[/
    Copyright (c) 2019 Vinnie Falco (vinnie.falco@gmail.com)

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

    Official repository: https://github.com/CPPAlliance/url
]

[#section.url_view]
[section URL]

[heading URLs, URIs, and URNs]

Uniform Resource Locators (URL - __rfc1738__), also informally called "web addresses",
are able to describe the name and location of a resource. A URL scheme, such as `http`,
identifies the method used to access the resource. A URL host, such as `www.boost.org`,
is used to identify where the resource is ['located]. The interpretation of a URL might
depend on scheme-specific requirements.

[table Example: URLs [
    [URL]
    [Scheme]
    [Host]
    [Resource]
][
    [`https://www.boost.org/index.html`]
    [`https`]
    [`www.boost.org`]
    [`index.html`]
][
    [`ftp://host.dom/etc/motd`]
    [`ftp`]
    [`host.dom`]
    [`etc/motd`]
]]

[h5 Classical View]

URLs are often compared to Uniform Resource Names (URN - __rfc1738__), a scheme
whose primary purpose is labeling resources with location-independent identifiers.
URNs, as other schemes, have their own syntax. The scheme `urn:` is reserved to
URNs, which do not specify how to locate a resource:

[table Example: URN [
    [URN]
    [Resource]
    [Namespace]
    [Identifier]
][
    [`urn:isbn:045145052`]
    [`isbn:045145052`]
    [`isbn`]
    [`045145052`]
]]

Uniform Resource Identifiers (URI - __rfc3986__) define a general scheme-independent syntax for
references to abstract or physical resources.
The initial URI specification ([@https://datatracker.ietf.org/doc/html/rfc2396 rfc2396])
described them as either URLs and URNs ([@https://datatracker.ietf.org/doc/html/rfc2396#section-1.2 rfc2396 section 1.2]).
The current specifications (__rfc3986__) refer to this hierarchy as the ['Classical View] (__rfc3305__, Section 2.1) of
URI partitioning:

[table URIs: Classical View [
    [URI]
    [Category]
][
    [`https://www.boost.org`]
    [URL]
][
    [`mailto:mduerst@ifi.unizh.ch`]
    [URL]
][
    [`telnet://melvyl.ucop.edu/`]
    [URL]
][
    [`urn:isbn:0-486-27557-4`]
    [URN]
]]

The following are examples of invalid URIs:

[table Invalid URIs [
    [Component]
    [Example]
    [Note]
][
    [Protocol-Relative Link (PRL)]
    [`www.boost.org` [footnote Formally, `www.boost.org` is either a `URI-reference` with path `www.boost.org` (__rfc3986__ Section 4.1) or a Protocol-Relative Link (PRL). It is not a [link url_notation `URI`] according to __rfc3986__, although often described as such in some sources.]]
    [Missing scheme.]
][
    [`URI-reference`]
    [`index.html`]
    [Missing scheme. Missing `urn:` scheme and requirements.]
]]

[#contemporary_view]
[h5 Contemporary View]

The Classical View of URI partitioning, where a URI is either a URI or a URL, caused
enough confusion to justify a specification about URI partitioning (__rfc3305__).

Common sources of confusion in the Classical View were:

# Most possible URIs were also URLs.
# URLs and Relative references are not required to locate a resource, while they are still not URNs.
# Scheme-independent URLs and URIs have the same grammar. A single algorithm is used for parsing both.
# URNs have scheme-specific requirements beyond the URI specification.

Thus, the URL/URN hierarchy became less relevant and the ['Contemporary View]
of URI partitioning (__rfc3305__, Section 2.2) is now that:

# URLs don't refer to a formal partition of the URI space.
# A scheme does not have to be classified into the discrete URL/URN categories.
# The `uri:` scheme is one of many possible URI schemes.
# All schemes can define subspaces and `urn:` namespaces are URN subspaces.
# Any URI can be a locator, a name, or both.

In this view, the terms URLs and URIs have the same grammar and are used
interchangeably in that regard.

[table URLs (or URIs): Contemporary View [
    [Example]
    [Scheme]
    [Host (Locator Component)]
    [Path (Name Component)]
][
    [`https://www.boost.org/index.html`]
    [`https`]
    [`www.boost.org`]
    [`index.html`]
][
    [`telnet://melvyl.ucop.edu/`]
    [`telnet`]
    [`melvyl.ucop.edu`]
    []
][
    [`mailto:mduerst@ifi.unizh.ch`]
    [`mailto`]
    []
    [`mduerst@ifi.unizh.ch`]
][
    [`urn:isbn:0-486-27557-4`]
    [`urn`]
    []
    [`isbn:0-486-27557-4`]
]]

The Contemporary View has been endorsed by __rfc3305__ (Section 5), and has been in use
in all other specifications since then, including the current URI grammar
(__rfc3986__, Section 1.1.3).

Although URIs and URLs have the same grammar, it's often useful to standardize on one
of these terms. Recent RFC documents standardize on the term URI rather than the most
restrictive term URL. However, the term URL is almost omnipresent in any other contexts
for being more specific, which provides more communication clarity.

This library also adheres to this Contemporary View of URI partitioning and standardizes
on the term "URL".

[#url_notation]
[heading Notation]

Following the syntax in __rfc3986__, a single algorithm is used for URLs, URIs
and IRIs. When discussing particular grammars, its rules are presented
exactly as it appears in the literature.

A URL string can be parsed using one of the parsing functions.

[table Parsing Functions [
    [Function]
    [Grammar]
    [Example]
    [Notes]
][
    [[link url.ref.boost__urls__parse_uri `parse_uri`]]
    [[@https://datatracker.ietf.org/doc/html/rfc3986#section-3 ['URI]]]
    [`http://www.boost.org/index.html?field=value#downloads`]
    [Supports fragment `#downloads`]
][
    [[link url.ref.boost__urls__parse_absolute_uri `parse_absolute_uri`]]
    [[@https://datatracker.ietf.org/doc/html/rfc3986#section-4.3 ['absolute-URI]]]
    [`http://www.boost.org/index.html?field=value`]
    [Does not support fragment]
][
    [[link url.ref.boost__urls__parse_relative_ref `parse_relative_ref`]]
    [[@https://datatracker.ietf.org/doc/html/rfc3986#section-4.2 ['relative-ref]]]
    [`//www.boost.org/index.html?field=value#downloads`]
    [Does not require scheme]
][
    [[link url.ref.boost__urls__parse_uri_reference `parse_uri_reference`]]
    [[@https://datatracker.ietf.org/doc/html/rfc3986#section-4.1 ['URI-reference]]]
    [`http://www.boost.org/index.html`]
    [Any `URI` or `relative-ref`]
]]

The library uses the convention that each function `parse_<component>` operates according
to the particular grammar rule `<component>` specified in __rfc3986__. The document
inherits from [@https://datatracker.ietf.org/doc/html/rfc2396 rfc2396], where there are
no `URL`, `absolute-URL`, `URL-reference` rules. Thus, for consistency, the main parsing
functions also make reference to `uri`s rather than `url`s.

The collective grammars parsed by these algorithms are specified below.

[teletype]
```
    absolute-URI    = scheme ":" hier-part [ "?" query ]

    relative-ref    = relative-part [ "?" query ] [ "#" fragment ]

    URI             = scheme ":" hier-part [ "?" query ] [ "#" fragment ]

    URI-reference   = URI / relative-ref

    hier-part       = "//" authority path-abempty
                    / path-absolute
                    / path-rootless
                    / path-empty

    relative-part   = "//" authority path-abempty
                    / path-absolute
                    / path-noscheme
                    / path-empty
```

[heading Example]

The following is an example URI and its main parts:

[teletype]
```
     foo://example.com:8042/over/there?name=ferret#nose
     \_/   \______________/\_________/ \_________/ \__/
      |           |            |            |        |
scheme     authority       path        query   fragment
```

For the complete specification please refer to __rfc3986__:

[note
    This documentation refers to the Augmented Backus-Naur Form (ABNF)
    notation of
    [@https://tools.ietf.org/html/rfc2234 rfc2234]
    to specify particular grammars used by algorithms and containers. While
    a complete understanding of the notation is not a requirement for using the
    library, it may help for understanding how valid components of URLs are
    defined. In particular, this will be of interest to users who wish to
    compose parsing algorithms using the combinators provided by the library.
]

[heading Functions]

All parsing functions accept a __string_view__ and return a
`__result__<__url_view__>`. The following example parses a string literal
containing a URI:

[c++]
[snippet_parsing_url_1]

While the parsing function refers to the `URI` grammar rule, the result refers
to a `url_view`. The convention `parse_<component>` produces `parse_uri` for
the `URI` grammar rule defined in __rfc3986__. However, as the library adheres to
the [link contemporary_view Contemporary View] of URI partitioning and standardizes
on the term "URL", it makes reference to the term "URL" elsewhere.

When the input does not match the URL grammar, the error is reported through
a `__result__<__url_view__>`. The result in a variant-like object
which holds a __url_view__ or an __error_code__ in the case where the parsing
failed. Note that like a string view, the URL view does not own the underlying
character buffer. Instead, it references the string passed to the parsing
function. The caller is required to ensure that the lifetime of the string
extends until the view is destroyed.

[heading Copying]

The function
[link url.ref.boost__urls__url_view.collect `url_view::collect`]
may be used to create a copy of the underlying character buffer and attach
ownership of the buffer to a newly returned view, which is wrapped in a
shared pointer. The following code calls `collect` to create a read-only
copy:

[c++]
[snippet_parsing_url_2]

The interface of __url_view__ decomposes the URL into its individual parts and
allows for inspection of the various parts as well as returning metadata about
the URL itself. These non-modifying observer operations are described in the
sections that follow.

To create a mutable copy of the __url_view__, one can just create a __url__:

[c++]
[snippet_parsing_url_3]

[heading Return Type]

In many places, functions in the library have a return type which uses the
__result__ alias template. This class allows the parsing algorithms to
report errors without referring to exceptions.

The functions `result::has_value` and `result::has_error` can be used to
check if the result contains an error.

[snippet_parsing_url_1]

This ensures `result::value` will not throw an error. In contexts where
it is acceptable to throw errors, `result::value` can be used directly.

Check the reference for __result__ for a synopsis of the type. For complete
information please consult the full
[@boost:/libs/system/doc/html/system.html#ref_resultt_e `result`]
documentation in [@boost:/libs/system/doc/html/system.html Boost.System].

[endsect]
