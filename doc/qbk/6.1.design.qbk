[/
    Copyright (c) 2019 Vinnie Falco (vinnie.falco@gmail.com)
    Copyright (c) 2021 Alan de Freitas (alandefreitas@gmail.com)

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

    Official repository: https://github.com/CPPAlliance/url
]

[section Design]

The function [link url.ref.boost__urls__grammar__parse `parse`] implements the logic for parsing strings
according to grammar rules.

A grammar rule type, henceforth called a "rule", provides an algorithm for parsing an input string. An
instance of the rule is used to store the results.

[table [[Code][Output]] [[
[c++]
[snippet_parse_1]
][
[teletype]
```
    scheme: http
    suffix: :after_scheme
```
]]]

In this example, the function [link url.ref.boost__urls__grammar__parse `parse`]
returns `true` if the specified range of characters begins with a scheme. When
the operation completes successfully, the rule instance holds the results.

The iterator is updated to the position where the rule ended, leaving the suffix
at the range between the new iterator and the old end iterator. This behavior is
useful when parsing a sequence of rules.

[table [[Code][Output]] [[
[c++]
[snippet_parse_2]
][
[teletype]
```
    query: ?key=value
    fragment: anchor
```
]]]

Parsing a sequence of rules is such a common pattern that a special overload is
provided:

[table [[Code][Output]] [[
[c++]
[snippet_parse_3]
][
[teletype]
```
    query: ?key=value
    fragment: anchor
```
]]]

If all the logic has been represented in a single rule, we often want to parse
a complete string as a rule.

[table [[Code][Output]] [[
[c++]
[snippet_parse_4]
][
[teletype]
```
    scheme: http
    host: www.boost.org
```
]]]

The function [link url.ref.boost__urls__grammar__parse_string `parse_string`] only returns
true when the whole string matches the rule.

[endsect]
