<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<tagfile>
    <compound kind="namespace">
        <name>boost::urls</name>
        <filename>boost/urls.adoc</filename>
        <class kind="class">boost::urls::authority_view</class>
        <class kind="class">boost::urls::decode_view</class>
        <class kind="class">boost::urls::encoding_opts</class>
        <class kind="class">boost::urls::ignore_case_param</class>
        <class kind="class">boost::urls::ipv4_address</class>
        <class kind="class">boost::urls::ipv6_address</class>
        <class kind="class">boost::urls::no_value_t</class>
        <class kind="class">boost::urls::param</class>
        <class kind="class">boost::urls::param_pct_view</class>
        <class kind="class">boost::urls::param_view</class>
        <class kind="class">boost::urls::params_base</class>
        <class kind="class">boost::urls::params_encoded_base</class>
        <class kind="class">boost::urls::params_encoded_ref</class>
        <class kind="class">boost::urls::params_encoded_view</class>
        <class kind="class">boost::urls::params_ref</class>
        <class kind="class">boost::urls::params_view</class>
        <class kind="class">boost::urls::pct_string_view</class>
        <class kind="class">boost::urls::segments_base</class>
        <class kind="class">boost::urls::segments_encoded_base</class>
        <class kind="class">boost::urls::segments_encoded_ref</class>
        <class kind="class">boost::urls::segments_encoded_view</class>
        <class kind="class">boost::urls::segments_ref</class>
        <class kind="class">boost::urls::segments_view</class>
        <class kind="class">boost::urls::static_url</class>
        <class kind="class">boost::urls::static_url_base</class>
        <class kind="class">boost::urls::url</class>
        <class kind="class">boost::urls::url_base</class>
        <class kind="class">boost::urls::url_view</class>
        <class kind="class">boost::urls::url_view_base</class>
        <class kind="class">boost::urls::error</class>
        <class kind="class">boost::urls::host_type</class>
        <class kind="class">boost::urls::scheme</class>
        <class kind="class">boost::urls::format_arg</class>
        <class kind="class">boost::urls::named_arg</class>
        <class kind="class">boost::urls::optional</class>
        <class kind="class">boost::urls::string_view</class>
        <class kind="class">boost::urls::variant</class>
        <class kind="class">boost::urls::absolute_uri_rule</class>
        <class kind="class">boost::urls::authority_rule</class>
        <class kind="class">boost::urls::gen_delim_chars</class>
        <class kind="class">boost::urls::ignore_case</class>
        <class kind="class">boost::urls::ipv4_address_rule</class>
        <class kind="class">boost::urls::ipv6_address_rule</class>
        <class kind="class">boost::urls::no_value</class>
        <class kind="class">boost::urls::origin_form_rule</class>
        <class kind="class">boost::urls::pchars</class>
        <class kind="class">boost::urls::query_rule</class>
        <class kind="class">boost::urls::relative_ref_rule</class>
        <class kind="class">boost::urls::reserved_chars</class>
        <class kind="class">boost::urls::sub_delim_chars</class>
        <class kind="class">boost::urls::unreserved_chars</class>
        <class kind="class">boost::urls::uri_reference_rule</class>
        <class kind="class">boost::urls::uri_rule</class>
        <member kind="function">
            <type>named_arg&lt;T&gt;</type>
            <name>arg</name>
            <anchorfile>boost/urls/arg.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view name, const T&amp; arg)</arglist>
        </member>
        <member kind="function">
            <type>std::uint16_t</type>
            <name>default_port</name>
            <anchorfile>boost/urls/default_port.adoc</anchorfile>
            <anchor/>
            <arglist>(scheme s)</arglist>
        </member>
        <member kind="function">
            <type>std::size_t</type>
            <name>encode</name>
            <anchorfile>boost/urls/encode-0a.adoc</anchorfile>
            <anchor/>
            <arglist>(char* dest, std::size_t size, core::string_view s, const CharSet&amp; unreserved, encoding_opts
                opt)
            </arglist>
        </member>
        <member kind="function">
            <type>StringToken::result_type</type>
            <name>encode</name>
            <anchorfile>boost/urls/encode-04.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s, const CharSet&amp; unreserved, encoding_opts opt, StringToken&amp;&amp;
                token)
            </arglist>
        </member>
        <member kind="function">
            <type>std::size_t</type>
            <name>encode_unsafe</name>
            <anchorfile>boost/urls/encode_unsafe.adoc</anchorfile>
            <anchor/>
            <arglist>(char* dest, std::size_t size, core::string_view s, const CharSet&amp; unreserved, encoding_opts
                opt)
            </arglist>
        </member>
        <member kind="function">
            <type>std::size_t</type>
            <name>encoded_size</name>
            <anchorfile>boost/urls/encoded_size.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s, const CharSet&amp; unreserved, encoding_opts opt)</arglist>
        </member>
        <member kind="function">
            <type>url</type>
            <name>format</name>
            <anchorfile>boost/urls/format-02.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view fmt, std::initializer_list&lt;format_arg&gt; args)</arglist>
        </member>
        <member kind="function">
            <type>url</type>
            <name>format</name>
            <anchorfile>boost/urls/format-05.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view fmt, Args...&amp;&amp; args)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>format_to</name>
            <anchorfile>boost/urls/format_to-0b.adoc</anchorfile>
            <anchor/>
            <arglist>(url_base&amp; u, core::string_view fmt, std::initializer_list&lt;format_arg&gt; args)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>format_to</name>
            <anchorfile>boost/urls/format_to-02.adoc</anchorfile>
            <anchor/>
            <arglist>(url_base&amp; u, core::string_view fmt, Args...&amp;&amp; args)</arglist>
        </member>
        <member kind="function">
            <type>system::result&lt;pct_string_view&gt;</type>
            <name>make_pct_string_view</name>
            <anchorfile>boost/urls/make_pct_string_view.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>make_pct_string_view_unsafe</name>
            <anchorfile>boost/urls/make_pct_string_view_unsafe.adoc</anchorfile>
            <anchor/>
            <arglist>(const char* data, std::size_t size, std::size_t decoded_size)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>boost/urls/operator_not_eq-02.adoc</anchorfile>
            <anchor/>
            <arglist>(const ipv4_address&amp; a1, const ipv4_address&amp; a2)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>boost/urls/operator_not_eq-07.adoc</anchorfile>
            <anchor/>
            <arglist>(const ipv6_address&amp; a1, const ipv6_address&amp; a2)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>boost/urls/operator_not_eq-03.adoc</anchorfile>
            <anchor/>
            <arglist>(const authority_view&amp; a0, const authority_view&amp; a1)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>boost/urls/operator_not_eq-08.adoc</anchorfile>
            <anchor/>
            <arglist>(const decode_view&amp; lhs, const decode_view&amp; rhs)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>boost/urls/operator_not_eq-04.adoc</anchorfile>
            <anchor/>
            <arglist>(const url_view_base&amp; u0, const url_view_base&amp; u1)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>boost/urls/operator_not_eq-06.adoc</anchorfile>
            <anchor/>
            <arglist>(const decode_view&amp; lhs, const S&amp; rhs)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>boost/urls/operator_not_eq-0b.adoc</anchorfile>
            <anchor/>
            <arglist>(const S&amp; lhs, const decode_view&amp; rhs)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>boost/urls/operator_lt-0a.adoc</anchorfile>
            <anchor/>
            <arglist>(const authority_view&amp; a0, const authority_view&amp; a1)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>boost/urls/operator_lt-05.adoc</anchorfile>
            <anchor/>
            <arglist>(const decode_view&amp; lhs, const decode_view&amp; rhs)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>boost/urls/operator_lt-04a.adoc</anchorfile>
            <anchor/>
            <arglist>(const url_view_base&amp; u0, const url_view_base&amp; u1)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>boost/urls/operator_lt-047.adoc</anchorfile>
            <anchor/>
            <arglist>(const decode_view&amp; lhs, const S&amp; rhs)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>boost/urls/operator_lt-03.adoc</anchorfile>
            <anchor/>
            <arglist>(const S&amp; lhs, const decode_view&amp; rhs)</arglist>
        </member>
        <member kind="function">
            <type>std::ostream&amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>boost/urls/operator_lshift-0a.adoc</anchorfile>
            <anchor/>
            <arglist>(std::ostream&amp; os, const ipv4_address&amp; addr)</arglist>
        </member>
        <member kind="function">
            <type>std::ostream&amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>boost/urls/operator_lshift-0f6.adoc</anchorfile>
            <anchor/>
            <arglist>(std::ostream&amp; os, const ipv6_address&amp; addr)</arglist>
        </member>
        <member kind="function">
            <type>std::ostream&amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>boost/urls/operator_lshift-0d.adoc</anchorfile>
            <anchor/>
            <arglist>(std::ostream&amp; os, const authority_view&amp; a)</arglist>
        </member>
        <member kind="function">
            <type>std::ostream&amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>boost/urls/operator_lshift-034.adoc</anchorfile>
            <anchor/>
            <arglist>(std::ostream&amp; os, const decode_view&amp; s)</arglist>
        </member>
        <member kind="function">
            <type>std::ostream&amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>boost/urls/operator_lshift-09.adoc</anchorfile>
            <anchor/>
            <arglist>(std::ostream&amp; os, const params_encoded_base&amp; qp)</arglist>
        </member>
        <member kind="function">
            <type>std::ostream&amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>boost/urls/operator_lshift-0b.adoc</anchorfile>
            <anchor/>
            <arglist>(std::ostream&amp; os, const params_base&amp; qp)</arglist>
        </member>
        <member kind="function">
            <type>std::ostream&amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>boost/urls/operator_lshift-0c.adoc</anchorfile>
            <anchor/>
            <arglist>(std::ostream&amp; os, const url_view_base&amp; u)</arglist>
        </member>
        <member kind="function">
            <type>std::ostream&amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>boost/urls/operator_lshift-038.adoc</anchorfile>
            <anchor/>
            <arglist>(std::ostream&amp; os, const segments_encoded_base&amp; ps)</arglist>
        </member>
        <member kind="function">
            <type>std::ostream&amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>boost/urls/operator_lshift-0f4.adoc</anchorfile>
            <anchor/>
            <arglist>(std::ostream&amp; os, const segments_base&amp; ps)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>boost/urls/operator_le-01.adoc</anchorfile>
            <anchor/>
            <arglist>(const authority_view&amp; a0, const authority_view&amp; a1)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>boost/urls/operator_le-00.adoc</anchorfile>
            <anchor/>
            <arglist>(const decode_view&amp; lhs, const decode_view&amp; rhs)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>boost/urls/operator_le-0a.adoc</anchorfile>
            <anchor/>
            <arglist>(const url_view_base&amp; u0, const url_view_base&amp; u1)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>boost/urls/operator_le-0e.adoc</anchorfile>
            <anchor/>
            <arglist>(const decode_view&amp; lhs, const S&amp; rhs)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>boost/urls/operator_le-06.adoc</anchorfile>
            <anchor/>
            <arglist>(const S&amp; lhs, const decode_view&amp; rhs)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>boost/urls/operator_eq-0f2.adoc</anchorfile>
            <anchor/>
            <arglist>(const ipv4_address&amp; a1, const ipv4_address&amp; a2)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>boost/urls/operator_eq-0fd.adoc</anchorfile>
            <anchor/>
            <arglist>(const ipv6_address&amp; a1, const ipv6_address&amp; a2)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>boost/urls/operator_eq-092.adoc</anchorfile>
            <anchor/>
            <arglist>(const authority_view&amp; a0, const authority_view&amp; a1)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>boost/urls/operator_eq-091.adoc</anchorfile>
            <anchor/>
            <arglist>(const decode_view&amp; lhs, const decode_view&amp; rhs)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>boost/urls/operator_eq-01.adoc</anchorfile>
            <anchor/>
            <arglist>(const url_view_base&amp; u0, const url_view_base&amp; u1)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>boost/urls/operator_eq-090.adoc</anchorfile>
            <anchor/>
            <arglist>(const decode_view&amp; lhs, const S&amp; rhs)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>boost/urls/operator_eq-02.adoc</anchorfile>
            <anchor/>
            <arglist>(const S&amp; lhs, const decode_view&amp; rhs)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>boost/urls/operator_gt-08.adoc</anchorfile>
            <anchor/>
            <arglist>(const authority_view&amp; a0, const authority_view&amp; a1)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>boost/urls/operator_gt-03.adoc</anchorfile>
            <anchor/>
            <arglist>(const decode_view&amp; lhs, const decode_view&amp; rhs)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>boost/urls/operator_gt-09.adoc</anchorfile>
            <anchor/>
            <arglist>(const url_view_base&amp; u0, const url_view_base&amp; u1)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>boost/urls/operator_gt-0a.adoc</anchorfile>
            <anchor/>
            <arglist>(const decode_view&amp; lhs, const S&amp; rhs)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>boost/urls/operator_gt-00.adoc</anchorfile>
            <anchor/>
            <arglist>(const S&amp; lhs, const decode_view&amp; rhs)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>boost/urls/operator_ge-08.adoc</anchorfile>
            <anchor/>
            <arglist>(const authority_view&amp; a0, const authority_view&amp; a1)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>boost/urls/operator_ge-06.adoc</anchorfile>
            <anchor/>
            <arglist>(const decode_view&amp; lhs, const decode_view&amp; rhs)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>boost/urls/operator_ge-00.adoc</anchorfile>
            <anchor/>
            <arglist>(const url_view_base&amp; u0, const url_view_base&amp; u1)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>boost/urls/operator_ge-09e.adoc</anchorfile>
            <anchor/>
            <arglist>(const decode_view&amp; lhs, const S&amp; rhs)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>boost/urls/operator_ge-09c.adoc</anchorfile>
            <anchor/>
            <arglist>(const S&amp; lhs, const decode_view&amp; rhs)</arglist>
        </member>
        <member kind="function">
            <type>system::result&lt;url_view&gt;</type>
            <name>parse_absolute_uri</name>
            <anchorfile>boost/urls/parse_absolute_uri.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>system::result&lt;authority_view&gt;</type>
            <name>parse_authority</name>
            <anchorfile>boost/urls/parse_authority.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>system::result&lt;ipv4_address&gt;</type>
            <name>parse_ipv4_address</name>
            <anchorfile>boost/urls/parse_ipv4_address.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>system::result&lt;ipv6_address&gt;</type>
            <name>parse_ipv6_address</name>
            <anchorfile>boost/urls/parse_ipv6_address.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>system::result&lt;url_view&gt;</type>
            <name>parse_origin_form</name>
            <anchorfile>boost/urls/parse_origin_form.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>system::result&lt;segments_encoded_view&gt;</type>
            <name>parse_path</name>
            <anchorfile>boost/urls/parse_path.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>system::result&lt;params_encoded_view&gt;</type>
            <name>parse_query</name>
            <anchorfile>boost/urls/parse_query.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>system::result&lt;url_view&gt;</type>
            <name>parse_relative_ref</name>
            <anchorfile>boost/urls/parse_relative_ref.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>system::result&lt;url_view&gt;</type>
            <name>parse_uri</name>
            <anchorfile>boost/urls/parse_uri.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>system::result&lt;url_view&gt;</type>
            <name>parse_uri_reference</name>
            <anchorfile>boost/urls/parse_uri_reference.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>implementation_defined::pct_encoded_rule_t&lt;CS&gt;</type>
            <name>pct_encoded_rule</name>
            <anchorfile>boost/urls/pct_encoded_rule.adoc</anchorfile>
            <anchor/>
            <arglist>(const CS&amp; cs)</arglist>
        </member>
        <member kind="function">
            <type>system::result&lt;void&gt;</type>
            <name>resolve</name>
            <anchorfile>boost/urls/resolve.adoc</anchorfile>
            <anchor/>
            <arglist>(const url_view_base&amp; base, const url_view_base&amp; ref, url_base&amp; dest)</arglist>
        </member>
        <member kind="function">
            <type>scheme</type>
            <name>string_to_scheme</name>
            <anchorfile>boost/urls/string_to_scheme.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>swap</name>
            <anchorfile>boost/urls/swap.adoc</anchorfile>
            <anchor/>
            <arglist>(url&amp; v0, url&amp; v1)</arglist>
        </member>
        <member kind="function">
            <type>core::string_view</type>
            <name>to_string</name>
            <anchorfile>boost/urls/to_string.adoc</anchorfile>
            <anchor/>
            <arglist>(scheme s)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>boost::urls::error_types</name>
        <filename>boost/urls/error_types.adoc</filename>
        <class kind="class">boost::urls::error_types::error_category</class>
        <class kind="class">boost::urls::error_types::error_code</class>
        <class kind="class">boost::urls::error_types::error_condition</class>
        <class kind="class">boost::urls::error_types::result</class>
        <class kind="class">boost::urls::error_types::system_error</class>
        <class kind="class">boost::urls::error_types::errc</class>
        <class kind="class">boost::urls::error_types::generic_category</class>
        <class kind="class">boost::urls::error_types::system_category</class>
    </compound>
    <compound kind="class">
        <name>boost::urls::error_types::error_category</name>
        <filename>boost/urls/error_types/error_category.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::error_types::error_code</name>
        <filename>boost/urls/error_types/error_code.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::error_types::error_condition</name>
        <filename>boost/urls/error_types/error_condition.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::error_types::result</name>
        <filename>boost/urls/error_types/result.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::error_types::system_error</name>
        <filename>boost/urls/error_types/system_error.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::error_types::errc</name>
        <filename>boost/urls/error_types/errc.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::error_types::generic_category</name>
        <filename>boost/urls/error_types/generic_category.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::error_types::system_category</name>
        <filename>boost/urls/error_types/system_category.adoc</filename>
    </compound>
    <compound kind="namespace">
        <name>boost::urls::grammar</name>
        <filename>boost/urls/grammar.adoc</filename>
        <class kind="class">boost::urls::grammar::literal_rule</class>
        <class kind="class">boost::urls::grammar::lut_chars</class>
        <class kind="class">boost::urls::grammar::range</class>
        <class kind="class">boost::urls::grammar::recycled</class>
        <class kind="class">boost::urls::grammar::recycled_ptr</class>
        <class kind="class">boost::urls::grammar::string_view_base</class>
        <class kind="class">boost::urls::grammar::unsigned_rule</class>
        <class kind="class">boost::urls::grammar::condition</class>
        <class kind="class">boost::urls::grammar::error</class>
        <class kind="class">boost::urls::grammar::aligned_storage</class>
        <class kind="class">boost::urls::grammar::ci_equal</class>
        <class kind="class">boost::urls::grammar::ci_hash</class>
        <class kind="class">boost::urls::grammar::ci_less</class>
        <class kind="class">boost::urls::grammar::is_charset</class>
        <class kind="class">boost::urls::grammar::is_rule</class>
        <class kind="class">boost::urls::grammar::all_chars</class>
        <class kind="class">boost::urls::grammar::alnum_chars</class>
        <class kind="class">boost::urls::grammar::alpha_chars</class>
        <class kind="class">boost::urls::grammar::dec_octet_rule</class>
        <class kind="class">boost::urls::grammar::digit_chars</class>
        <class kind="class">boost::urls::grammar::hexdig_chars</class>
        <class kind="class">boost::urls::grammar::vchars</class>
        <class kind="class">boost::urls::grammar::string_token</class>
        <class kind="class">boost::urls::grammar::CharSet</class>
        <class kind="class">boost::urls::grammar::Rule</class>
        <member kind="function">
            <type>int</type>
            <name>ci_compare</name>
            <anchorfile>boost/urls/grammar/ci_compare.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s0, core::string_view s1)</arglist>
        </member>
        <member kind="function">
            <type>std::size_t</type>
            <name>ci_digest</name>
            <anchorfile>boost/urls/grammar/ci_digest.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>ci_is_equal</name>
            <anchorfile>boost/urls/grammar/ci_is_equal-0b.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s0, core::string_view s1)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>ci_is_equal</name>
            <anchorfile>boost/urls/grammar/ci_is_equal-0a.adoc</anchorfile>
            <anchor/>
            <arglist>(const String0&amp; s0, const String1&amp; s1)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>ci_is_less</name>
            <anchorfile>boost/urls/grammar/ci_is_less.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s0, core::string_view s1)</arglist>
        </member>
        <member kind="function">
            <type>implementation_defined::ch_delim_rule</type>
            <name>delim_rule</name>
            <anchorfile>boost/urls/grammar/delim_rule-02.adoc</anchorfile>
            <anchor/>
            <arglist>(char ch)</arglist>
        </member>
        <member kind="function">
            <type>implementation_defined::cs_delim_rule&lt;CS&gt;</type>
            <name>delim_rule</name>
            <anchorfile>boost/urls/grammar/delim_rule-01.adoc</anchorfile>
            <anchor/>
            <arglist>(const CS&amp; cs)</arglist>
        </member>
        <member kind="function">
            <type>const char*</type>
            <name>find_if</name>
            <anchorfile>boost/urls/grammar/find_if.adoc</anchorfile>
            <anchor/>
            <arglist>(const char* const first, const char* const last, const CS&amp; cs)</arglist>
        </member>
        <member kind="function">
            <type>const char*</type>
            <name>find_if_not</name>
            <anchorfile>boost/urls/grammar/find_if_not.adoc</anchorfile>
            <anchor/>
            <arglist>(const char* const first, const char* const last, const CS&amp; cs)</arglist>
        </member>
        <member kind="function">
            <type>signed char</type>
            <name>hexdig_value</name>
            <anchorfile>boost/urls/grammar/hexdig_value.adoc</anchorfile>
            <anchor/>
            <arglist>(char ch)</arglist>
        </member>
        <member kind="function">
            <type>implementation_defined::not_empty_rule_t&lt;R&gt;</type>
            <name>not_empty_rule</name>
            <anchorfile>boost/urls/grammar/not_empty_rule.adoc</anchorfile>
            <anchor/>
            <arglist>(const R&amp; r)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>boost/urls/grammar/operator_not_eq.adoc</anchorfile>
            <anchor/>
            <arglist>(const S0&amp; s0, const S1&amp; s1)</arglist>
        </member>
        <member kind="function">
            <type>lut_chars</type>
            <name>operator+</name>
            <anchorfile>boost/urls/grammar/operator_plus.adoc</anchorfile>
            <anchor/>
            <arglist>(const lut_chars&amp; cs0, const lut_chars&amp; cs1)</arglist>
        </member>
        <member kind="function">
            <type>lut_chars</type>
            <name>operator-</name>
            <anchorfile>boost/urls/grammar/operator_minus.adoc</anchorfile>
            <anchor/>
            <arglist>(const lut_chars&amp; cs0, const lut_chars&amp; cs1)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>boost/urls/grammar/operator_lt.adoc</anchorfile>
            <anchor/>
            <arglist>(const S0&amp; s0, const S1&amp; s1)</arglist>
        </member>
        <member kind="function">
            <type>std::ostream&amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>boost/urls/grammar/operator_lshift.adoc</anchorfile>
            <anchor/>
            <arglist>(std::ostream&amp; os, const string_view_base&amp; s)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>boost/urls/grammar/operator_le.adoc</anchorfile>
            <anchor/>
            <arglist>(const S0&amp; s0, const S1&amp; s1)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>boost/urls/grammar/operator_eq.adoc</anchorfile>
            <anchor/>
            <arglist>(const S0&amp; s0, const S1&amp; s1)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>boost/urls/grammar/operator_gt.adoc</anchorfile>
            <anchor/>
            <arglist>(const S0&amp; s0, const S1&amp; s1)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>boost/urls/grammar/operator_ge.adoc</anchorfile>
            <anchor/>
            <arglist>(const S0&amp; s0, const S1&amp; s1)</arglist>
        </member>
        <member kind="function">
            <type>implementation_defined::optional_rule_t&lt;R&gt;</type>
            <name>optional_rule</name>
            <anchorfile>boost/urls/grammar/optional_rule.adoc</anchorfile>
            <anchor/>
            <arglist>(const R&amp; r)</arglist>
        </member>
        <member kind="function">
            <type>system::result&lt;R::value_type&gt;</type>
            <name>parse</name>
            <anchorfile>boost/urls/grammar/parse-06.adoc</anchorfile>
            <anchor/>
            <arglist>(const char*&amp; it, const char* end, const R&amp; r)</arglist>
        </member>
        <member kind="function">
            <type>system::result&lt;R::value_type&gt;</type>
            <name>parse</name>
            <anchorfile>boost/urls/grammar/parse-02.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s, const R&amp; r)</arglist>
        </member>
        <member kind="function">
            <type>implementation_defined::range_rule_t&lt;R&gt;</type>
            <name>range_rule</name>
            <anchorfile>boost/urls/grammar/range_rule-0e7.adoc</anchorfile>
            <anchor/>
            <arglist>(const R&amp; next, std::size_t N, std::size_t M)</arglist>
        </member>
        <member kind="function">
            <type>implementation_defined::range_rule_t&lt;R1, R2&gt;</type>
            <name>range_rule</name>
            <anchorfile>boost/urls/grammar/range_rule-0e0.adoc</anchorfile>
            <anchor/>
            <arglist>(const R1&amp; first, const R2&amp; next, std::size_t N, std::size_t M)</arglist>
        </member>
        <member kind="function">
            <type>implementation_defined::charset_ref&lt;CS&gt;</type>
            <name>ref</name>
            <anchorfile>boost/urls/grammar/ref-02.adoc</anchorfile>
            <anchor/>
            <arglist>(const CS&amp; cs)</arglist>
        </member>
        <member kind="function">
            <type>implementation_defined::rule_ref&lt;R&gt;</type>
            <name>ref</name>
            <anchorfile>boost/urls/grammar/ref-0e.adoc</anchorfile>
            <anchor/>
            <arglist>(const R&amp; r)</arglist>
        </member>
        <member kind="function">
            <type>implementation_defined::squelch_rule_t&lt;R&gt;</type>
            <name>squelch</name>
            <anchorfile>boost/urls/grammar/squelch.adoc</anchorfile>
            <anchor/>
            <arglist>(const R&amp; r)</arglist>
        </member>
        <member kind="function">
            <type>char</type>
            <name>to_lower</name>
            <anchorfile>boost/urls/grammar/to_lower.adoc</anchorfile>
            <anchor/>
            <arglist>(char c)</arglist>
        </member>
        <member kind="function">
            <type>char</type>
            <name>to_upper</name>
            <anchorfile>boost/urls/grammar/to_upper.adoc</anchorfile>
            <anchor/>
            <arglist>(char c)</arglist>
        </member>
        <member kind="function">
            <type>implementation_defined::token_rule_t&lt;CharSet&gt;</type>
            <name>token_rule</name>
            <anchorfile>boost/urls/grammar/token_rule.adoc</anchorfile>
            <anchor/>
            <arglist>(const CharSet&amp; cs)</arglist>
        </member>
        <member kind="function">
            <type>implementation_defined::tuple_rule_t&lt;R0, Rn...&gt;</type>
            <name>tuple_rule</name>
            <anchorfile>boost/urls/grammar/tuple_rule.adoc</anchorfile>
            <anchor/>
            <arglist>(const R0&amp; r0, const Rn...&amp; rn)</arglist>
        </member>
        <member kind="function">
            <type>implementation_defined::variant_rule_t&lt;R0, Rn...&gt;</type>
            <name>variant_rule</name>
            <anchorfile>boost/urls/grammar/variant_rule.adoc</anchorfile>
            <anchor/>
            <arglist>(const R0&amp; r0, const Rn...&amp; rn)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::grammar::literal_rule</name>
        <filename>boost/urls/grammar/literal_rule.adoc</filename>
        <member kind="function">
            <type>void</type>
            <name>literal_rule</name>
            <anchorfile>boost/urls/grammar/literal_rule/2constructor.adoc</anchorfile>
            <anchor/>
            <arglist>(const char* s)</arglist>
        </member>
        <member kind="function">
            <type>system::result&lt;value_type&gt;</type>
            <name>parse</name>
            <anchorfile>boost/urls/grammar/literal_rule/parse.adoc</anchorfile>
            <anchor/>
            <arglist>(const char*&amp; it, const char* end)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::grammar::lut_chars</name>
        <filename>boost/urls/grammar/lut_chars.adoc</filename>
        <member kind="function">
            <type>void</type>
            <name>lut_chars</name>
            <anchorfile>boost/urls/grammar/lut_chars/2constructor-079.adoc</anchorfile>
            <anchor/>
            <arglist>(char ch)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>lut_chars</name>
            <anchorfile>boost/urls/grammar/lut_chars/2constructor-074.adoc</anchorfile>
            <anchor/>
            <arglist>(const char* s)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>lut_chars</name>
            <anchorfile>boost/urls/grammar/lut_chars/2constructor-02.adoc</anchorfile>
            <anchor/>
            <arglist>(const Pred&amp; pred)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator()</name>
            <anchorfile>boost/urls/grammar/lut_chars/operator_call-0fe.adoc</anchorfile>
            <anchor/>
            <arglist>(unsigned char ch)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator()</name>
            <anchorfile>boost/urls/grammar/lut_chars/operator_call-0f6.adoc</anchorfile>
            <anchor/>
            <arglist>(char ch)</arglist>
        </member>
        <member kind="function">
            <type>lut_chars</type>
            <name>operator~</name>
            <anchorfile>boost/urls/grammar/lut_chars/operator_bitnot.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::grammar::range</name>
        <filename>boost/urls/grammar/range.adoc</filename>
        <member kind="function">
            <type>iterator</type>
            <name>begin</name>
            <anchorfile>boost/urls/grammar/range/begin.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>boost/urls/grammar/range/empty.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>end</name>
            <anchorfile>boost/urls/grammar/range/end.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>range&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/grammar/range/operator_assign-08.adoc</anchorfile>
            <anchor/>
            <arglist>(range&amp;&amp; )</arglist>
        </member>
        <member kind="function">
            <type>range&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/grammar/range/operator_assign-0e.adoc</anchorfile>
            <anchor/>
            <arglist>(const range&amp; )</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>range</name>
            <anchorfile>boost/urls/grammar/range/2constructor-01e.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>range</name>
            <anchorfile>boost/urls/grammar/range/2constructor-08.adoc</anchorfile>
            <anchor/>
            <arglist>(range&amp;&amp; )</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>range</name>
            <anchorfile>boost/urls/grammar/range/2constructor-01b.adoc</anchorfile>
            <anchor/>
            <arglist>(const range&amp; )</arglist>
        </member>
        <member kind="function">
            <type>std::size_t</type>
            <name>size</name>
            <anchorfile>boost/urls/grammar/range/size.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>core::string_view</type>
            <name>string</name>
            <anchorfile>boost/urls/grammar/range/string.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>~range</name>
            <anchorfile>boost/urls/grammar/range/2destructor.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::grammar::recycled</name>
        <filename>boost/urls/grammar/recycled.adoc</filename>
        <member kind="function">
            <type>void</type>
            <name>recycled</name>
            <anchorfile>boost/urls/grammar/recycled/2constructor.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>~recycled</name>
            <anchorfile>boost/urls/grammar/recycled/2destructor.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::grammar::recycled_ptr</name>
        <filename>boost/urls/grammar/recycled_ptr.adoc</filename>
        <member kind="function">
            <type>T&amp;</type>
            <name>acquire</name>
            <anchorfile>boost/urls/grammar/recycled_ptr/acquire.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>recycled&lt;T&gt;&amp;</type>
            <name>bin</name>
            <anchorfile>boost/urls/grammar/recycled_ptr/bin.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>boost/urls/grammar/recycled_ptr/empty.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>T*</type>
            <name>get</name>
            <anchorfile>boost/urls/grammar/recycled_ptr/get.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator bool</name>
            <anchorfile>boost/urls/grammar/recycled_ptr/2conversion.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>T&amp;</type>
            <name>operator*</name>
            <anchorfile>boost/urls/grammar/recycled_ptr/operator_star.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>T*</type>
            <name>operator-&gt;</name>
            <anchorfile>boost/urls/grammar/recycled_ptr/operator_ptr.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>recycled_ptr&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/grammar/recycled_ptr/operator_assign-0b.adoc</anchorfile>
            <anchor/>
            <arglist>(recycled_ptr&amp;&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>recycled_ptr&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/grammar/recycled_ptr/operator_assign-09.adoc</anchorfile>
            <anchor/>
            <arglist>(const recycled_ptr&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>recycled_ptr</name>
            <anchorfile>boost/urls/grammar/recycled_ptr/2constructor-08.adoc</anchorfile>
            <anchor/>
            <arglist>(recycled&lt;T&gt;&amp; bin)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>recycled_ptr</name>
            <anchorfile>boost/urls/grammar/recycled_ptr/2constructor-0ac.adoc</anchorfile>
            <anchor/>
            <arglist>(recycled&lt;T&gt;&amp; bin, std::nullptr_t )</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>recycled_ptr</name>
            <anchorfile>boost/urls/grammar/recycled_ptr/2constructor-056.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>recycled_ptr</name>
            <anchorfile>boost/urls/grammar/recycled_ptr/2constructor-05e.adoc</anchorfile>
            <anchor/>
            <arglist>(std::nullptr_t )</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>recycled_ptr</name>
            <anchorfile>boost/urls/grammar/recycled_ptr/2constructor-0ab.adoc</anchorfile>
            <anchor/>
            <arglist>(const recycled_ptr&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>recycled_ptr</name>
            <anchorfile>boost/urls/grammar/recycled_ptr/2constructor-0f.adoc</anchorfile>
            <anchor/>
            <arglist>(recycled_ptr&amp;&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>release</name>
            <anchorfile>boost/urls/grammar/recycled_ptr/release.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>~recycled_ptr</name>
            <anchorfile>boost/urls/grammar/recycled_ptr/2destructor.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::grammar::string_view_base</name>
        <filename>boost/urls/grammar/string_view_base.adoc</filename>
        <member kind="function">
            <type>const_reference</type>
            <name>at</name>
            <anchorfile>boost/urls/grammar/string_view_base/at.adoc</anchorfile>
            <anchor/>
            <arglist>(size_type pos)</arglist>
        </member>
        <member kind="function">
            <type>const_reference</type>
            <name>back</name>
            <anchorfile>boost/urls/grammar/string_view_base/back.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>const_iterator</type>
            <name>begin</name>
            <anchorfile>boost/urls/grammar/string_view_base/begin.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>const_iterator</type>
            <name>cbegin</name>
            <anchorfile>boost/urls/grammar/string_view_base/cbegin.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>const_iterator</type>
            <name>cend</name>
            <anchorfile>boost/urls/grammar/string_view_base/cend.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>int</type>
            <name>compare</name>
            <anchorfile>boost/urls/grammar/string_view_base/compare-02.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view str)</arglist>
        </member>
        <member kind="function">
            <type>int</type>
            <name>compare</name>
            <anchorfile>boost/urls/grammar/string_view_base/compare-0e.adoc</anchorfile>
            <anchor/>
            <arglist>(size_type pos1, size_type n1, core::string_view str)</arglist>
        </member>
        <member kind="function">
            <type>int</type>
            <name>compare</name>
            <anchorfile>boost/urls/grammar/string_view_base/compare-03.adoc</anchorfile>
            <anchor/>
            <arglist>(size_type pos1, size_type n1, core::string_view str, size_type pos2, size_type n2)</arglist>
        </member>
        <member kind="function">
            <type>int</type>
            <name>compare</name>
            <anchorfile>boost/urls/grammar/string_view_base/compare-07.adoc</anchorfile>
            <anchor/>
            <arglist>(const char* s)</arglist>
        </member>
        <member kind="function">
            <type>int</type>
            <name>compare</name>
            <anchorfile>boost/urls/grammar/string_view_base/compare-09.adoc</anchorfile>
            <anchor/>
            <arglist>(size_type pos1, size_type n1, const char* s)</arglist>
        </member>
        <member kind="function">
            <type>int</type>
            <name>compare</name>
            <anchorfile>boost/urls/grammar/string_view_base/compare-08.adoc</anchorfile>
            <anchor/>
            <arglist>(size_type pos1, size_type n1, const char* s, size_type n2)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>boost/urls/grammar/string_view_base/contains-08.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view sv)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>boost/urls/grammar/string_view_base/contains-04.adoc</anchorfile>
            <anchor/>
            <arglist>(char c)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>boost/urls/grammar/string_view_base/contains-03.adoc</anchorfile>
            <anchor/>
            <arglist>(const char* s)</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>copy</name>
            <anchorfile>boost/urls/grammar/string_view_base/copy.adoc</anchorfile>
            <anchor/>
            <arglist>(char* s, size_type n, size_type pos)</arglist>
        </member>
        <member kind="function">
            <type>const_reverse_iterator</type>
            <name>crbegin</name>
            <anchorfile>boost/urls/grammar/string_view_base/crbegin.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>const_reverse_iterator</type>
            <name>crend</name>
            <anchorfile>boost/urls/grammar/string_view_base/crend.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>const_pointer</type>
            <name>data</name>
            <anchorfile>boost/urls/grammar/string_view_base/data.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>boost/urls/grammar/string_view_base/empty.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>const_iterator</type>
            <name>end</name>
            <anchorfile>boost/urls/grammar/string_view_base/end.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>ends_with</name>
            <anchorfile>boost/urls/grammar/string_view_base/ends_with-0a.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view x)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>ends_with</name>
            <anchorfile>boost/urls/grammar/string_view_base/ends_with-06.adoc</anchorfile>
            <anchor/>
            <arglist>(char x)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>ends_with</name>
            <anchorfile>boost/urls/grammar/string_view_base/ends_with-0c.adoc</anchorfile>
            <anchor/>
            <arglist>(const char* x)</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>find</name>
            <anchorfile>boost/urls/grammar/string_view_base/find-0e.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view str, size_type pos)</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>find</name>
            <anchorfile>boost/urls/grammar/string_view_base/find-026.adoc</anchorfile>
            <anchor/>
            <arglist>(char c, size_type pos)</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>find</name>
            <anchorfile>boost/urls/grammar/string_view_base/find-07.adoc</anchorfile>
            <anchor/>
            <arglist>(const char* s, size_type pos, size_type n)</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>find</name>
            <anchorfile>boost/urls/grammar/string_view_base/find-02a.adoc</anchorfile>
            <anchor/>
            <arglist>(const char* s, size_type pos)</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>find_first_not_of</name>
            <anchorfile>boost/urls/grammar/string_view_base/find_first_not_of-0c.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view str, size_type pos)</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>find_first_not_of</name>
            <anchorfile>boost/urls/grammar/string_view_base/find_first_not_of-0d.adoc</anchorfile>
            <anchor/>
            <arglist>(char c, size_type pos)</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>find_first_not_of</name>
            <anchorfile>boost/urls/grammar/string_view_base/find_first_not_of-048.adoc</anchorfile>
            <anchor/>
            <arglist>(const char* s, size_type pos, size_type n)</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>find_first_not_of</name>
            <anchorfile>boost/urls/grammar/string_view_base/find_first_not_of-04e.adoc</anchorfile>
            <anchor/>
            <arglist>(const char* s, size_type pos)</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>find_first_of</name>
            <anchorfile>boost/urls/grammar/string_view_base/find_first_of-0d.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view str, size_type pos)</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>find_first_of</name>
            <anchorfile>boost/urls/grammar/string_view_base/find_first_of-0ae.adoc</anchorfile>
            <anchor/>
            <arglist>(char c, size_type pos)</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>find_first_of</name>
            <anchorfile>boost/urls/grammar/string_view_base/find_first_of-02.adoc</anchorfile>
            <anchor/>
            <arglist>(const char* s, size_type pos, size_type n)</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>find_first_of</name>
            <anchorfile>boost/urls/grammar/string_view_base/find_first_of-0a5.adoc</anchorfile>
            <anchor/>
            <arglist>(const char* s, size_type pos)</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>find_last_not_of</name>
            <anchorfile>boost/urls/grammar/string_view_base/find_last_not_of-00d.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view str, size_type pos)</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>find_last_not_of</name>
            <anchorfile>boost/urls/grammar/string_view_base/find_last_not_of-06.adoc</anchorfile>
            <anchor/>
            <arglist>(char c, size_type pos)</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>find_last_not_of</name>
            <anchorfile>boost/urls/grammar/string_view_base/find_last_not_of-009.adoc</anchorfile>
            <anchor/>
            <arglist>(const char* s, size_type pos, size_type n)</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>find_last_not_of</name>
            <anchorfile>boost/urls/grammar/string_view_base/find_last_not_of-0f.adoc</anchorfile>
            <anchor/>
            <arglist>(const char* s, size_type pos)</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>find_last_of</name>
            <anchorfile>boost/urls/grammar/string_view_base/find_last_of-0e.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view str, size_type pos)</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>find_last_of</name>
            <anchorfile>boost/urls/grammar/string_view_base/find_last_of-011.adoc</anchorfile>
            <anchor/>
            <arglist>(char c, size_type pos)</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>find_last_of</name>
            <anchorfile>boost/urls/grammar/string_view_base/find_last_of-08.adoc</anchorfile>
            <anchor/>
            <arglist>(const char* s, size_type pos, size_type n)</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>find_last_of</name>
            <anchorfile>boost/urls/grammar/string_view_base/find_last_of-016.adoc</anchorfile>
            <anchor/>
            <arglist>(const char* s, size_type pos)</arglist>
        </member>
        <member kind="function">
            <type>const_reference</type>
            <name>front</name>
            <anchorfile>boost/urls/grammar/string_view_base/front.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>length</name>
            <anchorfile>boost/urls/grammar/string_view_base/length.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>max_size</name>
            <anchorfile>boost/urls/grammar/string_view_base/max_size.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>std::string</type>
            <name>operator basic_string&lt;char&gt;</name>
            <anchorfile>boost/urls/grammar/string_view_base/2conversion-06.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>std::string_view</type>
            <name>operator basic_string_view&lt;char&gt;</name>
            <anchorfile>boost/urls/grammar/string_view_base/2conversion-0e.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>string_view_base&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/grammar/string_view_base/operator_assign.adoc</anchorfile>
            <anchor/>
            <arglist>(const string_view_base&amp; )</arglist>
        </member>
        <member kind="function">
            <type>const_reference</type>
            <name>operator[]</name>
            <anchorfile>boost/urls/grammar/string_view_base/operator_subs.adoc</anchorfile>
            <anchor/>
            <arglist>(size_type pos)</arglist>
        </member>
        <member kind="function">
            <type>const_reverse_iterator</type>
            <name>rbegin</name>
            <anchorfile>boost/urls/grammar/string_view_base/rbegin.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>const_reverse_iterator</type>
            <name>rend</name>
            <anchorfile>boost/urls/grammar/string_view_base/rend.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>rfind</name>
            <anchorfile>boost/urls/grammar/string_view_base/rfind-0a.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view str, size_type pos)</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>rfind</name>
            <anchorfile>boost/urls/grammar/string_view_base/rfind-03.adoc</anchorfile>
            <anchor/>
            <arglist>(char c, size_type pos)</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>rfind</name>
            <anchorfile>boost/urls/grammar/string_view_base/rfind-09.adoc</anchorfile>
            <anchor/>
            <arglist>(const char* s, size_type pos, size_type n)</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>rfind</name>
            <anchorfile>boost/urls/grammar/string_view_base/rfind-0d.adoc</anchorfile>
            <anchor/>
            <arglist>(const char* s, size_type pos)</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>size</name>
            <anchorfile>boost/urls/grammar/string_view_base/size.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>starts_with</name>
            <anchorfile>boost/urls/grammar/string_view_base/starts_with-06.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view x)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>starts_with</name>
            <anchorfile>boost/urls/grammar/string_view_base/starts_with-0b.adoc</anchorfile>
            <anchor/>
            <arglist>(char x)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>starts_with</name>
            <anchorfile>boost/urls/grammar/string_view_base/starts_with-0d.adoc</anchorfile>
            <anchor/>
            <arglist>(const char* x)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>string_view_base</name>
            <anchorfile>boost/urls/grammar/string_view_base/2constructor-09.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>string_view_base</name>
            <anchorfile>boost/urls/grammar/string_view_base/2constructor-04.adoc</anchorfile>
            <anchor/>
            <arglist>(const char* data, std::size_t size)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>string_view_base</name>
            <anchorfile>boost/urls/grammar/string_view_base/2constructor-02.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>string_view_base</name>
            <anchorfile>boost/urls/grammar/string_view_base/2constructor-0e.adoc</anchorfile>
            <anchor/>
            <arglist>(const string_view_base&amp; )</arglist>
        </member>
        <member kind="function">
            <type>core::string_view</type>
            <name>substr</name>
            <anchorfile>boost/urls/grammar/string_view_base/substr.adoc</anchorfile>
            <anchor/>
            <arglist>(size_type pos, size_type n)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>swap</name>
            <anchorfile>boost/urls/grammar/string_view_base/swap.adoc</anchorfile>
            <anchor/>
            <arglist>(string_view_base&amp; s)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::grammar::unsigned_rule</name>
        <filename>boost/urls/grammar/unsigned_rule.adoc</filename>
        <member kind="function">
            <type>system::result&lt;value_type&gt;</type>
            <name>parse</name>
            <anchorfile>boost/urls/grammar/unsigned_rule/parse.adoc</anchorfile>
            <anchor/>
            <arglist>(const char*&amp; it, const char* end)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::grammar::condition</name>
        <filename>boost/urls/grammar/condition.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::grammar::error</name>
        <filename>boost/urls/grammar/error.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::grammar::aligned_storage</name>
        <filename>boost/urls/grammar/aligned_storage.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::grammar::ci_equal</name>
        <filename>boost/urls/grammar/ci_equal.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::grammar::ci_hash</name>
        <filename>boost/urls/grammar/ci_hash.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::grammar::ci_less</name>
        <filename>boost/urls/grammar/ci_less.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::grammar::is_charset</name>
        <filename>boost/urls/grammar/is_charset.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::grammar::is_rule</name>
        <filename>boost/urls/grammar/is_rule.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::grammar::all_chars</name>
        <filename>boost/urls/grammar/all_chars.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::grammar::alnum_chars</name>
        <filename>boost/urls/grammar/alnum_chars.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::grammar::alpha_chars</name>
        <filename>boost/urls/grammar/alpha_chars.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::grammar::dec_octet_rule</name>
        <filename>boost/urls/grammar/dec_octet_rule.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::grammar::digit_chars</name>
        <filename>boost/urls/grammar/digit_chars.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::grammar::hexdig_chars</name>
        <filename>boost/urls/grammar/hexdig_chars.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::grammar::vchars</name>
        <filename>boost/urls/grammar/vchars.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::grammar::string_token</name>
        <filename>boost/urls/grammar/string_token.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::grammar::CharSet</name>
        <filename>boost/urls/grammar/CharSet.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::grammar::Rule</name>
        <filename>boost/urls/grammar/Rule.adoc</filename>
    </compound>
    <compound kind="namespace">
        <name>boost::urls::string_token</name>
        <filename>boost/urls/string_token.adoc</filename>
        <class kind="class">boost::urls::string_token::arg</class>
        <class kind="class">boost::urls::string_token::is_token</class>
        <class kind="class">boost::urls::string_token::return_string</class>
        <class kind="class">boost::urls::string_token::StringToken</class>
        <member kind="function">
            <type>implementation_defined::append_to_t&lt;Alloc&gt;</type>
            <name>append_to</name>
            <anchorfile>boost/urls/string_token/append_to.adoc</anchorfile>
            <anchor/>
            <arglist>(std::basic_string&lt;char, std::char_traits&lt;char&gt;, Alloc&gt;&amp; s)</arglist>
        </member>
        <member kind="function">
            <type>implementation_defined::assign_to_t&lt;Alloc&gt;</type>
            <name>assign_to</name>
            <anchorfile>boost/urls/string_token/assign_to.adoc</anchorfile>
            <anchor/>
            <arglist>(std::basic_string&lt;char, std::char_traits&lt;char&gt;, Alloc&gt;&amp; s)</arglist>
        </member>
        <member kind="function">
            <type>implementation_defined::preserve_size_t&lt;Alloc&gt;</type>
            <name>preserve_size</name>
            <anchorfile>boost/urls/string_token/preserve_size.adoc</anchorfile>
            <anchor/>
            <arglist>(std::basic_string&lt;char, std::char_traits&lt;char&gt;, Alloc&gt;&amp; s)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::string_token::arg</name>
        <filename>boost/urls/string_token/arg.adoc</filename>
        <member kind="function">
            <type>void</type>
            <name>arg</name>
            <anchorfile>boost/urls/string_token/arg/2constructor-01.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>arg</name>
            <anchorfile>boost/urls/string_token/arg/2constructor-0c.adoc</anchorfile>
            <anchor/>
            <arglist>(arg&amp;&amp; )</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>arg</name>
            <anchorfile>boost/urls/string_token/arg/2constructor-05.adoc</anchorfile>
            <anchor/>
            <arglist>(const arg&amp; )</arglist>
        </member>
        <member kind="function">
            <type>arg&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/string_token/arg/operator_assign-0f.adoc</anchorfile>
            <anchor/>
            <arglist>(arg&amp;&amp; )</arglist>
        </member>
        <member kind="function">
            <type>arg&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/string_token/arg/operator_assign-01.adoc</anchorfile>
            <anchor/>
            <arglist>(const arg&amp; )</arglist>
        </member>
        <member kind="function">
            <type>char*</type>
            <name>prepare</name>
            <anchorfile>boost/urls/string_token/arg/prepare.adoc</anchorfile>
            <anchor/>
            <arglist>(std::size_t n)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>~arg</name>
            <anchorfile>boost/urls/string_token/arg/2destructor.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::string_token::is_token</name>
        <filename>boost/urls/string_token/is_token.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::string_token::return_string</name>
        <filename>boost/urls/string_token/return_string.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::string_token::StringToken</name>
        <filename>boost/urls/string_token/StringToken.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::authority_view</name>
        <filename>boost/urls/authority_view.adoc</filename>
        <member kind="function">
            <type>void</type>
            <name>authority_view</name>
            <anchorfile>boost/urls/authority_view/2constructor-0e.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>authority_view</name>
            <anchorfile>boost/urls/authority_view/2constructor-03.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>authority_view</name>
            <anchorfile>boost/urls/authority_view/2constructor-04.adoc</anchorfile>
            <anchor/>
            <arglist>(const authority_view&amp; )</arglist>
        </member>
        <member kind="function">
            <type>core::string_view</type>
            <name>buffer</name>
            <anchorfile>boost/urls/authority_view/buffer.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>int</type>
            <name>compare</name>
            <anchorfile>boost/urls/authority_view/compare.adoc</anchorfile>
            <anchor/>
            <arglist>(const authority_view&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>const char*</type>
            <name>data</name>
            <anchorfile>boost/urls/authority_view/data.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>boost/urls/authority_view/empty.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>encoded_host</name>
            <anchorfile>boost/urls/authority_view/encoded_host.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>encoded_host_address</name>
            <anchorfile>boost/urls/authority_view/encoded_host_address.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>encoded_host_and_port</name>
            <anchorfile>boost/urls/authority_view/encoded_host_and_port.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>encoded_host_name</name>
            <anchorfile>boost/urls/authority_view/encoded_host_name.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>encoded_password</name>
            <anchorfile>boost/urls/authority_view/encoded_password.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>encoded_user</name>
            <anchorfile>boost/urls/authority_view/encoded_user.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>encoded_userinfo</name>
            <anchorfile>boost/urls/authority_view/encoded_userinfo.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>has_password</name>
            <anchorfile>boost/urls/authority_view/has_password.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>has_port</name>
            <anchorfile>boost/urls/authority_view/has_port.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>has_userinfo</name>
            <anchorfile>boost/urls/authority_view/has_userinfo.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>StringToken::result_type</type>
            <name>host</name>
            <anchorfile>boost/urls/authority_view/host.adoc</anchorfile>
            <anchor/>
            <arglist>(StringToken&amp;&amp; token)</arglist>
        </member>
        <member kind="function">
            <type>StringToken::result_type</type>
            <name>host_address</name>
            <anchorfile>boost/urls/authority_view/host_address.adoc</anchorfile>
            <anchor/>
            <arglist>(StringToken&amp;&amp; token)</arglist>
        </member>
        <member kind="function">
            <type>ipv4_address</type>
            <name>host_ipv4_address</name>
            <anchorfile>boost/urls/authority_view/host_ipv4_address.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>ipv6_address</type>
            <name>host_ipv6_address</name>
            <anchorfile>boost/urls/authority_view/host_ipv6_address.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>core::string_view</type>
            <name>host_ipvfuture</name>
            <anchorfile>boost/urls/authority_view/host_ipvfuture.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>StringToken::result_type</type>
            <name>host_name</name>
            <anchorfile>boost/urls/authority_view/host_name.adoc</anchorfile>
            <anchor/>
            <arglist>(StringToken&amp;&amp; token)</arglist>
        </member>
        <member kind="function">
            <type>urls::host_type</type>
            <name>host_type</name>
            <anchorfile>boost/urls/authority_view/host_type.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>authority_view&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/authority_view/operator_assign.adoc</anchorfile>
            <anchor/>
            <arglist>(const authority_view&amp; )</arglist>
        </member>
        <member kind="function">
            <type>StringToken::result_type</type>
            <name>password</name>
            <anchorfile>boost/urls/authority_view/password.adoc</anchorfile>
            <anchor/>
            <arglist>(StringToken&amp;&amp; token)</arglist>
        </member>
        <member kind="function">
            <type>core::string_view</type>
            <name>port</name>
            <anchorfile>boost/urls/authority_view/port.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>std::uint16_t</type>
            <name>port_number</name>
            <anchorfile>boost/urls/authority_view/port_number.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>std::size_t</type>
            <name>size</name>
            <anchorfile>boost/urls/authority_view/size.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>StringToken::result_type</type>
            <name>user</name>
            <anchorfile>boost/urls/authority_view/user.adoc</anchorfile>
            <anchor/>
            <arglist>(StringToken&amp;&amp; token)</arglist>
        </member>
        <member kind="function">
            <type>StringToken::result_type</type>
            <name>userinfo</name>
            <anchorfile>boost/urls/authority_view/userinfo.adoc</anchorfile>
            <anchor/>
            <arglist>(StringToken&amp;&amp; token)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>~authority_view</name>
            <anchorfile>boost/urls/authority_view/2destructor.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::decode_view</name>
        <filename>boost/urls/decode_view.adoc</filename>
        <member kind="function">
            <type>reference</type>
            <name>back</name>
            <anchorfile>boost/urls/decode_view/back.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>begin</name>
            <anchorfile>boost/urls/decode_view/begin.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>int</type>
            <name>compare</name>
            <anchorfile>boost/urls/decode_view/compare-02.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view other)</arglist>
        </member>
        <member kind="function">
            <type>int</type>
            <name>compare</name>
            <anchorfile>boost/urls/decode_view/compare-01.adoc</anchorfile>
            <anchor/>
            <arglist>(decode_view other)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>decode_view</name>
            <anchorfile>boost/urls/decode_view/2constructor-07.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>decode_view</name>
            <anchorfile>boost/urls/decode_view/2constructor-03.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s, encoding_opts opt)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>boost/urls/decode_view/empty.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>end</name>
            <anchorfile>boost/urls/decode_view/end.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>ends_with</name>
            <anchorfile>boost/urls/decode_view/ends_with-04.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>ends_with</name>
            <anchorfile>boost/urls/decode_view/ends_with-0d.adoc</anchorfile>
            <anchor/>
            <arglist>(char ch)</arglist>
        </member>
        <member kind="function">
            <type>const_iterator</type>
            <name>find</name>
            <anchorfile>boost/urls/decode_view/find.adoc</anchorfile>
            <anchor/>
            <arglist>(char ch)</arglist>
        </member>
        <member kind="function">
            <type>reference</type>
            <name>front</name>
            <anchorfile>boost/urls/decode_view/front.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>encoding_opts</type>
            <name>options</name>
            <anchorfile>boost/urls/decode_view/options.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>remove_prefix</name>
            <anchorfile>boost/urls/decode_view/remove_prefix.adoc</anchorfile>
            <anchor/>
            <arglist>(size_type n)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>remove_suffix</name>
            <anchorfile>boost/urls/decode_view/remove_suffix.adoc</anchorfile>
            <anchor/>
            <arglist>(size_type n)</arglist>
        </member>
        <member kind="function">
            <type>const_iterator</type>
            <name>rfind</name>
            <anchorfile>boost/urls/decode_view/rfind.adoc</anchorfile>
            <anchor/>
            <arglist>(char ch)</arglist>
        </member>
        <member kind="function">
            <type>size_type</type>
            <name>size</name>
            <anchorfile>boost/urls/decode_view/size.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>starts_with</name>
            <anchorfile>boost/urls/decode_view/starts_with-01.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>starts_with</name>
            <anchorfile>boost/urls/decode_view/starts_with-0b.adoc</anchorfile>
            <anchor/>
            <arglist>(char ch)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::encoding_opts</name>
        <filename>boost/urls/encoding_opts.adoc</filename>
        <member kind="function">
            <type>void</type>
            <name>encoding_opts</name>
            <anchorfile>boost/urls/encoding_opts/2constructor.adoc</anchorfile>
            <anchor/>
            <arglist>(bool space_as_plus_, bool lower_case_, bool disallow_null_)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::ignore_case_param</name>
        <filename>boost/urls/ignore_case_param.adoc</filename>
        <member kind="function">
            <type>void</type>
            <name>ignore_case_param</name>
            <anchorfile>boost/urls/ignore_case_param/2constructor-03.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>ignore_case_param</name>
            <anchorfile>boost/urls/ignore_case_param/2constructor-00.adoc</anchorfile>
            <anchor/>
            <arglist>(implementation_defined::ignore_case_t )</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>operator bool</name>
            <anchorfile>boost/urls/ignore_case_param/2conversion.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::ipv4_address</name>
        <filename>boost/urls/ipv4_address.adoc</filename>
        <member kind="function">
            <type>ipv4_address</type>
            <name>any</name>
            <anchorfile>boost/urls/ipv4_address/any.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>ipv4_address</type>
            <name>broadcast</name>
            <anchorfile>boost/urls/ipv4_address/broadcast.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>ipv4_address</name>
            <anchorfile>boost/urls/ipv4_address/2constructor-0c.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>ipv4_address</name>
            <anchorfile>boost/urls/ipv4_address/2constructor-0d.adoc</anchorfile>
            <anchor/>
            <arglist>(const ipv4_address&amp; )</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>ipv4_address</name>
            <anchorfile>boost/urls/ipv4_address/2constructor-06.adoc</anchorfile>
            <anchor/>
            <arglist>(uint_type u)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>ipv4_address</name>
            <anchorfile>boost/urls/ipv4_address/2constructor-0b.adoc</anchorfile>
            <anchor/>
            <arglist>(const bytes_type&amp; bytes)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>ipv4_address</name>
            <anchorfile>boost/urls/ipv4_address/2constructor-08.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>is_loopback</name>
            <anchorfile>boost/urls/ipv4_address/is_loopback.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>is_multicast</name>
            <anchorfile>boost/urls/ipv4_address/is_multicast.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>is_unspecified</name>
            <anchorfile>boost/urls/ipv4_address/is_unspecified.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>ipv4_address</type>
            <name>loopback</name>
            <anchorfile>boost/urls/ipv4_address/loopback.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>ipv4_address&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/ipv4_address/operator_assign.adoc</anchorfile>
            <anchor/>
            <arglist>(const ipv4_address&amp; )</arglist>
        </member>
        <member kind="function">
            <type>core::string_view</type>
            <name>to_buffer</name>
            <anchorfile>boost/urls/ipv4_address/to_buffer.adoc</anchorfile>
            <anchor/>
            <arglist>(char* dest, std::size_t dest_size)</arglist>
        </member>
        <member kind="function">
            <type>bytes_type</type>
            <name>to_bytes</name>
            <anchorfile>boost/urls/ipv4_address/to_bytes.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>StringToken::result_type</type>
            <name>to_string</name>
            <anchorfile>boost/urls/ipv4_address/to_string.adoc</anchorfile>
            <anchor/>
            <arglist>(StringToken&amp;&amp; token)</arglist>
        </member>
        <member kind="function">
            <type>uint_type</type>
            <name>to_uint</name>
            <anchorfile>boost/urls/ipv4_address/to_uint.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::ipv6_address</name>
        <filename>boost/urls/ipv6_address.adoc</filename>
        <member kind="function">
            <type>void</type>
            <name>ipv6_address</name>
            <anchorfile>boost/urls/ipv6_address/2constructor-04.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>ipv6_address</name>
            <anchorfile>boost/urls/ipv6_address/2constructor-06.adoc</anchorfile>
            <anchor/>
            <arglist>(const ipv6_address&amp; )</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>ipv6_address</name>
            <anchorfile>boost/urls/ipv6_address/2constructor-0a.adoc</anchorfile>
            <anchor/>
            <arglist>(const bytes_type&amp; bytes)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>ipv6_address</name>
            <anchorfile>boost/urls/ipv6_address/2constructor-08.adoc</anchorfile>
            <anchor/>
            <arglist>(const ipv4_address&amp; addr)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>ipv6_address</name>
            <anchorfile>boost/urls/ipv6_address/2constructor-00.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>is_loopback</name>
            <anchorfile>boost/urls/ipv6_address/is_loopback.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>is_unspecified</name>
            <anchorfile>boost/urls/ipv6_address/is_unspecified.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>is_v4_mapped</name>
            <anchorfile>boost/urls/ipv6_address/is_v4_mapped.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>ipv6_address</type>
            <name>loopback</name>
            <anchorfile>boost/urls/ipv6_address/loopback.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>ipv6_address&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/ipv6_address/operator_assign.adoc</anchorfile>
            <anchor/>
            <arglist>(const ipv6_address&amp; )</arglist>
        </member>
        <member kind="function">
            <type>core::string_view</type>
            <name>to_buffer</name>
            <anchorfile>boost/urls/ipv6_address/to_buffer.adoc</anchorfile>
            <anchor/>
            <arglist>(char* dest, std::size_t dest_size)</arglist>
        </member>
        <member kind="function">
            <type>bytes_type</type>
            <name>to_bytes</name>
            <anchorfile>boost/urls/ipv6_address/to_bytes.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>StringToken::result_type</type>
            <name>to_string</name>
            <anchorfile>boost/urls/ipv6_address/to_string.adoc</anchorfile>
            <anchor/>
            <arglist>(StringToken&amp;&amp; token)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::no_value_t</name>
        <filename>boost/urls/no_value_t.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::param</name>
        <filename>boost/urls/param.adoc</filename>
        <member kind="function">
            <type>const param*</type>
            <name>operator-&gt;</name>
            <anchorfile>boost/urls/param/operator_ptr.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>param&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/param/operator_assign-0b.adoc</anchorfile>
            <anchor/>
            <arglist>(param&amp;&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>param&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/param/operator_assign-0cd.adoc</anchorfile>
            <anchor/>
            <arglist>(const param&amp; )</arglist>
        </member>
        <member kind="function">
            <type>param&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/param/operator_assign-0cb.adoc</anchorfile>
            <anchor/>
            <arglist>(const param_view&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>param&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/param/operator_assign-03.adoc</anchorfile>
            <anchor/>
            <arglist>(const param_pct_view&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>param</name>
            <anchorfile>boost/urls/param/2constructor-09.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>param</name>
            <anchorfile>boost/urls/param/2constructor-07.adoc</anchorfile>
            <anchor/>
            <arglist>(param&amp;&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>param</name>
            <anchorfile>boost/urls/param/2constructor-0d.adoc</anchorfile>
            <anchor/>
            <arglist>(const param&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>param</name>
            <anchorfile>boost/urls/param/2constructor-0a.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view key, core::string_view value, bool has_value)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>param</name>
            <anchorfile>boost/urls/param/2constructor-0b.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view key, const OptionalString&amp; value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::param_pct_view</name>
        <filename>boost/urls/param_pct_view.adoc</filename>
        <member kind="function">
            <type>param</type>
            <name>operator param</name>
            <anchorfile>boost/urls/param_pct_view/2conversion-00.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>param_view</type>
            <name>operator param_view</name>
            <anchorfile>boost/urls/param_pct_view/2conversion-0c.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>const param_pct_view*</type>
            <name>operator-&gt;</name>
            <anchorfile>boost/urls/param_pct_view/operator_ptr.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>param_pct_view</name>
            <anchorfile>boost/urls/param_pct_view/2constructor-00.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>param_pct_view</name>
            <anchorfile>boost/urls/param_pct_view/2constructor-0e.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view key, pct_string_view value)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>param_pct_view</name>
            <anchorfile>boost/urls/param_pct_view/2constructor-03.adoc</anchorfile>
            <anchor/>
            <arglist>(const param_view&amp; p)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>param_pct_view</name>
            <anchorfile>boost/urls/param_pct_view/2constructor-02.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view key, pct_string_view value, bool has_value)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>param_pct_view</name>
            <anchorfile>boost/urls/param_pct_view/2constructor-05.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view key, const OptionalString&amp; value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::param_view</name>
        <filename>boost/urls/param_view.adoc</filename>
        <member kind="function">
            <type>param</type>
            <name>operator param</name>
            <anchorfile>boost/urls/param_view/2conversion.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>const param_view*</type>
            <name>operator-&gt;</name>
            <anchorfile>boost/urls/param_view/operator_ptr.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>param_view</name>
            <anchorfile>boost/urls/param_view/2constructor-07a.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>param_view</name>
            <anchorfile>boost/urls/param_view/2constructor-07e.adoc</anchorfile>
            <anchor/>
            <arglist>(const param&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>param_view</name>
            <anchorfile>boost/urls/param_view/2constructor-03.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view key_, core::string_view value_, bool has_value_)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>param_view</name>
            <anchorfile>boost/urls/param_view/2constructor-01.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view key, const OptionalString&amp; value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::params_base</name>
        <filename>boost/urls/params_base.adoc</filename>
        <member kind="function">
            <type>iterator</type>
            <name>begin</name>
            <anchorfile>boost/urls/params_base/begin.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>buffer</name>
            <anchorfile>boost/urls/params_base/buffer.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>boost/urls/params_base/contains.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view key, ignore_case_param ic)</arglist>
        </member>
        <member kind="function">
            <type>std::size_t</type>
            <name>count</name>
            <anchorfile>boost/urls/params_base/count.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view key, ignore_case_param ic)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>boost/urls/params_base/empty.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>end</name>
            <anchorfile>boost/urls/params_base/end.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>find</name>
            <anchorfile>boost/urls/params_base/find-09.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view key, ignore_case_param ic)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>find</name>
            <anchorfile>boost/urls/params_base/find-04.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator from, core::string_view key, ignore_case_param ic)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>find_last</name>
            <anchorfile>boost/urls/params_base/find_last-04.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view key, ignore_case_param ic)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>find_last</name>
            <anchorfile>boost/urls/params_base/find_last-0d.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator before, core::string_view key, ignore_case_param ic)</arglist>
        </member>
        <member kind="function">
            <type>std::size_t</type>
            <name>max_size</name>
            <anchorfile>boost/urls/params_base/max_size.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>std::size_t</type>
            <name>size</name>
            <anchorfile>boost/urls/params_base/size.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::params_encoded_base</name>
        <filename>boost/urls/params_encoded_base.adoc</filename>
        <member kind="function">
            <type>iterator</type>
            <name>begin</name>
            <anchorfile>boost/urls/params_encoded_base/begin.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>buffer</name>
            <anchorfile>boost/urls/params_encoded_base/buffer.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>boost/urls/params_encoded_base/contains.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view key, ignore_case_param ic)</arglist>
        </member>
        <member kind="function">
            <type>std::size_t</type>
            <name>count</name>
            <anchorfile>boost/urls/params_encoded_base/count.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view key, ignore_case_param ic)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>boost/urls/params_encoded_base/empty.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>end</name>
            <anchorfile>boost/urls/params_encoded_base/end.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>find</name>
            <anchorfile>boost/urls/params_encoded_base/find-03.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view key, ignore_case_param ic)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>find</name>
            <anchorfile>boost/urls/params_encoded_base/find-00.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator from, pct_string_view key, ignore_case_param ic)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>find_last</name>
            <anchorfile>boost/urls/params_encoded_base/find_last-05.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view key, ignore_case_param ic)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>find_last</name>
            <anchorfile>boost/urls/params_encoded_base/find_last-0d.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator before, pct_string_view key, ignore_case_param ic)</arglist>
        </member>
        <member kind="function">
            <type>std::size_t</type>
            <name>max_size</name>
            <anchorfile>boost/urls/params_encoded_base/max_size.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>std::size_t</type>
            <name>size</name>
            <anchorfile>boost/urls/params_encoded_base/size.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::params_encoded_ref</name>
        <filename>boost/urls/params_encoded_ref.adoc</filename>
        <member kind="function">
            <type>iterator</type>
            <name>append</name>
            <anchorfile>boost/urls/params_encoded_ref/append-07.adoc</anchorfile>
            <anchor/>
            <arglist>(const param_pct_view&amp; p)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>append</name>
            <anchorfile>boost/urls/params_encoded_ref/append-0e.adoc</anchorfile>
            <anchor/>
            <arglist>(std::initializer_list&lt;param_pct_view&gt; init)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>append</name>
            <anchorfile>boost/urls/params_encoded_ref/append-08.adoc</anchorfile>
            <anchor/>
            <arglist>(FwdIt first, FwdIt last)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>assign</name>
            <anchorfile>boost/urls/params_encoded_ref/assign-00.adoc</anchorfile>
            <anchor/>
            <arglist>(std::initializer_list&lt;param_pct_view&gt; init)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>assign</name>
            <anchorfile>boost/urls/params_encoded_ref/assign-07.adoc</anchorfile>
            <anchor/>
            <arglist>(FwdIt first, FwdIt last)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>clear</name>
            <anchorfile>boost/urls/params_encoded_ref/clear.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>erase</name>
            <anchorfile>boost/urls/params_encoded_ref/erase-08.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator pos)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>erase</name>
            <anchorfile>boost/urls/params_encoded_ref/erase-0b.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator first, iterator last)</arglist>
        </member>
        <member kind="function">
            <type>std::size_t</type>
            <name>erase</name>
            <anchorfile>boost/urls/params_encoded_ref/erase-00.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view key, ignore_case_param ic)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>insert</name>
            <anchorfile>boost/urls/params_encoded_ref/insert-03.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator before, const param_pct_view&amp; p)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>insert</name>
            <anchorfile>boost/urls/params_encoded_ref/insert-0b.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator before, std::initializer_list&lt;param_pct_view&gt; init)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>insert</name>
            <anchorfile>boost/urls/params_encoded_ref/insert-05.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator before, FwdIt first, FwdIt last)</arglist>
        </member>
        <member kind="function">
            <type>params_encoded_view</type>
            <name>operator params_encoded_view</name>
            <anchorfile>boost/urls/params_encoded_ref/2conversion.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>params_encoded_ref&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/params_encoded_ref/operator_assign-02.adoc</anchorfile>
            <anchor/>
            <arglist>(const params_encoded_ref&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>params_encoded_ref&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/params_encoded_ref/operator_assign-03.adoc</anchorfile>
            <anchor/>
            <arglist>(std::initializer_list&lt;param_pct_view&gt; init)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>params_encoded_ref</name>
            <anchorfile>boost/urls/params_encoded_ref/2constructor.adoc</anchorfile>
            <anchor/>
            <arglist>(const params_encoded_ref&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>replace</name>
            <anchorfile>boost/urls/params_encoded_ref/replace-0f.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator pos, const param_pct_view&amp; p)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>replace</name>
            <anchorfile>boost/urls/params_encoded_ref/replace-08.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator from, iterator to, std::initializer_list&lt;param_pct_view&gt; init)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>replace</name>
            <anchorfile>boost/urls/params_encoded_ref/replace-06.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator from, iterator to, FwdIt first, FwdIt last)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>set</name>
            <anchorfile>boost/urls/params_encoded_ref/set-0d.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator pos, pct_string_view value)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>set</name>
            <anchorfile>boost/urls/params_encoded_ref/set-07.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view key, pct_string_view value, ignore_case_param ic)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>unset</name>
            <anchorfile>boost/urls/params_encoded_ref/unset.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator pos)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>url</name>
            <anchorfile>boost/urls/params_encoded_ref/url.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::params_encoded_view</name>
        <filename>boost/urls/params_encoded_view.adoc</filename>
        <member kind="function">
            <type>params_view</type>
            <name>operator params_view</name>
            <anchorfile>boost/urls/params_encoded_view/2conversion.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>params_encoded_view&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/params_encoded_view/operator_assign.adoc</anchorfile>
            <anchor/>
            <arglist>(const params_encoded_view&amp; )</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>params_encoded_view</name>
            <anchorfile>boost/urls/params_encoded_view/2constructor-02.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>params_encoded_view</name>
            <anchorfile>boost/urls/params_encoded_view/2constructor-06.adoc</anchorfile>
            <anchor/>
            <arglist>(const params_encoded_view&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>params_encoded_view</name>
            <anchorfile>boost/urls/params_encoded_view/2constructor-0c.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::params_ref</name>
        <filename>boost/urls/params_ref.adoc</filename>
        <member kind="function">
            <type>iterator</type>
            <name>append</name>
            <anchorfile>boost/urls/params_ref/append-0f.adoc</anchorfile>
            <anchor/>
            <arglist>(const param_view&amp; p)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>append</name>
            <anchorfile>boost/urls/params_ref/append-07.adoc</anchorfile>
            <anchor/>
            <arglist>(std::initializer_list&lt;param_view&gt; init)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>append</name>
            <anchorfile>boost/urls/params_ref/append-0c.adoc</anchorfile>
            <anchor/>
            <arglist>(FwdIt first, FwdIt last)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>assign</name>
            <anchorfile>boost/urls/params_ref/assign-09.adoc</anchorfile>
            <anchor/>
            <arglist>(std::initializer_list&lt;param_view&gt; init)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>assign</name>
            <anchorfile>boost/urls/params_ref/assign-02.adoc</anchorfile>
            <anchor/>
            <arglist>(FwdIt first, FwdIt last)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>clear</name>
            <anchorfile>boost/urls/params_ref/clear.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>erase</name>
            <anchorfile>boost/urls/params_ref/erase-05.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator pos)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>erase</name>
            <anchorfile>boost/urls/params_ref/erase-0f.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator first, iterator last)</arglist>
        </member>
        <member kind="function">
            <type>std::size_t</type>
            <name>erase</name>
            <anchorfile>boost/urls/params_ref/erase-00.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view key, ignore_case_param ic)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>insert</name>
            <anchorfile>boost/urls/params_ref/insert-08.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator before, const param_view&amp; p)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>insert</name>
            <anchorfile>boost/urls/params_ref/insert-02.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator before, std::initializer_list&lt;param_view&gt; init)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>insert</name>
            <anchorfile>boost/urls/params_ref/insert-05.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator before, FwdIt first, FwdIt last)</arglist>
        </member>
        <member kind="function">
            <type>params_view</type>
            <name>operator params_view</name>
            <anchorfile>boost/urls/params_ref/2conversion.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>params_ref&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/params_ref/operator_assign-0c.adoc</anchorfile>
            <anchor/>
            <arglist>(const params_ref&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>params_ref&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/params_ref/operator_assign-03.adoc</anchorfile>
            <anchor/>
            <arglist>(std::initializer_list&lt;param_view&gt; init)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>params_ref</name>
            <anchorfile>boost/urls/params_ref/2constructor-0b.adoc</anchorfile>
            <anchor/>
            <arglist>(const params_ref&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>params_ref</name>
            <anchorfile>boost/urls/params_ref/2constructor-09.adoc</anchorfile>
            <anchor/>
            <arglist>(const params_ref&amp; other, encoding_opts opt)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>replace</name>
            <anchorfile>boost/urls/params_ref/replace-0d.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator pos, const param_view&amp; p)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>replace</name>
            <anchorfile>boost/urls/params_ref/replace-0b.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator from, iterator to, std::initializer_list&lt;param_view&gt; init)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>replace</name>
            <anchorfile>boost/urls/params_ref/replace-01.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator from, iterator to, FwdIt first, FwdIt last)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>set</name>
            <anchorfile>boost/urls/params_ref/set-09.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator pos, core::string_view value)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>set</name>
            <anchorfile>boost/urls/params_ref/set-01.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view key, core::string_view value, ignore_case_param ic)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>unset</name>
            <anchorfile>boost/urls/params_ref/unset.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator pos)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>url</name>
            <anchorfile>boost/urls/params_ref/url.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::params_view</name>
        <filename>boost/urls/params_view.adoc</filename>
        <member kind="function">
            <type>params_view&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/params_view/operator_assign.adoc</anchorfile>
            <anchor/>
            <arglist>(const params_view&amp; )</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>params_view</name>
            <anchorfile>boost/urls/params_view/2constructor-0d.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>params_view</name>
            <anchorfile>boost/urls/params_view/2constructor-091.adoc</anchorfile>
            <anchor/>
            <arglist>(const params_view&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>params_view</name>
            <anchorfile>boost/urls/params_view/2constructor-01.adoc</anchorfile>
            <anchor/>
            <arglist>(const params_view&amp; other, encoding_opts opt)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>params_view</name>
            <anchorfile>boost/urls/params_view/2constructor-09a.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>params_view</name>
            <anchorfile>boost/urls/params_view/2constructor-04.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s, encoding_opts opt)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::pct_string_view</name>
        <filename>boost/urls/pct_string_view.adoc</filename>
        <member kind="function">
            <type>StringToken::result_type</type>
            <name>decode</name>
            <anchorfile>boost/urls/pct_string_view/decode.adoc</anchorfile>
            <anchor/>
            <arglist>(encoding_opts opt, StringToken&amp;&amp; token)</arglist>
        </member>
        <member kind="function">
            <type>std::size_t</type>
            <name>decoded_size</name>
            <anchorfile>boost/urls/pct_string_view/decoded_size.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>decode_view</type>
            <name>operator*</name>
            <anchorfile>boost/urls/pct_string_view/operator_star.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>const pct_string_view*</type>
            <name>operator-&gt;</name>
            <anchorfile>boost/urls/pct_string_view/operator_ptr.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/pct_string_view/operator_assign.adoc</anchorfile>
            <anchor/>
            <arglist>(const pct_string_view&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>pct_string_view</name>
            <anchorfile>boost/urls/pct_string_view/2constructor-00.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>pct_string_view</name>
            <anchorfile>boost/urls/pct_string_view/2constructor-07.adoc</anchorfile>
            <anchor/>
            <arglist>(const pct_string_view&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>pct_string_view</name>
            <anchorfile>boost/urls/pct_string_view/2constructor-0f.adoc</anchorfile>
            <anchor/>
            <arglist>(std::nullptr_t )</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>pct_string_view</name>
            <anchorfile>boost/urls/pct_string_view/2constructor-05.adoc</anchorfile>
            <anchor/>
            <arglist>(const char* s, std::size_t len)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>pct_string_view</name>
            <anchorfile>boost/urls/pct_string_view/2constructor-0d.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>pct_string_view</name>
            <anchorfile>boost/urls/pct_string_view/2constructor-0c.adoc</anchorfile>
            <anchor/>
            <arglist>(const String&amp; s)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>swap</name>
            <anchorfile>boost/urls/pct_string_view/swap.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view&amp; s)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::segments_base</name>
        <filename>boost/urls/segments_base.adoc</filename>
        <member kind="function">
            <type>std::string</type>
            <name>back</name>
            <anchorfile>boost/urls/segments_base/back.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>begin</name>
            <anchorfile>boost/urls/segments_base/begin.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>buffer</name>
            <anchorfile>boost/urls/segments_base/buffer.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>boost/urls/segments_base/empty.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>end</name>
            <anchorfile>boost/urls/segments_base/end.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>std::string</type>
            <name>front</name>
            <anchorfile>boost/urls/segments_base/front.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>is_absolute</name>
            <anchorfile>boost/urls/segments_base/is_absolute.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>std::size_t</type>
            <name>max_size</name>
            <anchorfile>boost/urls/segments_base/max_size.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>std::size_t</type>
            <name>size</name>
            <anchorfile>boost/urls/segments_base/size.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::segments_encoded_base</name>
        <filename>boost/urls/segments_encoded_base.adoc</filename>
        <member kind="function">
            <type>pct_string_view</type>
            <name>back</name>
            <anchorfile>boost/urls/segments_encoded_base/back.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>begin</name>
            <anchorfile>boost/urls/segments_encoded_base/begin.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>buffer</name>
            <anchorfile>boost/urls/segments_encoded_base/buffer.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>boost/urls/segments_encoded_base/empty.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>end</name>
            <anchorfile>boost/urls/segments_encoded_base/end.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>front</name>
            <anchorfile>boost/urls/segments_encoded_base/front.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>is_absolute</name>
            <anchorfile>boost/urls/segments_encoded_base/is_absolute.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>std::size_t</type>
            <name>max_size</name>
            <anchorfile>boost/urls/segments_encoded_base/max_size.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>std::size_t</type>
            <name>size</name>
            <anchorfile>boost/urls/segments_encoded_base/size.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::segments_encoded_ref</name>
        <filename>boost/urls/segments_encoded_ref.adoc</filename>
        <member kind="function">
            <type>void</type>
            <name>assign</name>
            <anchorfile>boost/urls/segments_encoded_ref/assign-0e.adoc</anchorfile>
            <anchor/>
            <arglist>(std::initializer_list&lt;pct_string_view&gt; init)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>assign</name>
            <anchorfile>boost/urls/segments_encoded_ref/assign-0b.adoc</anchorfile>
            <anchor/>
            <arglist>(FwdIt first, FwdIt last)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>clear</name>
            <anchorfile>boost/urls/segments_encoded_ref/clear.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>erase</name>
            <anchorfile>boost/urls/segments_encoded_ref/erase-006.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator pos)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>erase</name>
            <anchorfile>boost/urls/segments_encoded_ref/erase-00a.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator first, iterator last)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>insert</name>
            <anchorfile>boost/urls/segments_encoded_ref/insert-04.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator before, pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>insert</name>
            <anchorfile>boost/urls/segments_encoded_ref/insert-0d.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator before, std::initializer_list&lt;pct_string_view&gt; init)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>insert</name>
            <anchorfile>boost/urls/segments_encoded_ref/insert-07.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator before, FwdIt first, FwdIt last)</arglist>
        </member>
        <member kind="function">
            <type>segments_encoded_view</type>
            <name>operator segments_encoded_view</name>
            <anchorfile>boost/urls/segments_encoded_ref/2conversion.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>segments_encoded_ref&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/segments_encoded_ref/operator_assign-02c.adoc</anchorfile>
            <anchor/>
            <arglist>(const segments_encoded_ref&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>segments_encoded_ref&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/segments_encoded_ref/operator_assign-02e.adoc</anchorfile>
            <anchor/>
            <arglist>(const segments_encoded_view&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>segments_encoded_ref&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/segments_encoded_ref/operator_assign-08.adoc</anchorfile>
            <anchor/>
            <arglist>(std::initializer_list&lt;pct_string_view&gt; init)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>pop_back</name>
            <anchorfile>boost/urls/segments_encoded_ref/pop_back.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>push_back</name>
            <anchorfile>boost/urls/segments_encoded_ref/push_back.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>replace</name>
            <anchorfile>boost/urls/segments_encoded_ref/replace-07.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator pos, pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>replace</name>
            <anchorfile>boost/urls/segments_encoded_ref/replace-06.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator from, iterator to, pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>replace</name>
            <anchorfile>boost/urls/segments_encoded_ref/replace-08.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator from, iterator to, std::initializer_list&lt;pct_string_view&gt; init)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>replace</name>
            <anchorfile>boost/urls/segments_encoded_ref/replace-0f.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator from, iterator to, FwdIt first, FwdIt last)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>segments_encoded_ref</name>
            <anchorfile>boost/urls/segments_encoded_ref/2constructor.adoc</anchorfile>
            <anchor/>
            <arglist>(const segments_encoded_ref&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>url</name>
            <anchorfile>boost/urls/segments_encoded_ref/url.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::segments_encoded_view</name>
        <filename>boost/urls/segments_encoded_view.adoc</filename>
        <member kind="function">
            <type>segments_view</type>
            <name>operator segments_view</name>
            <anchorfile>boost/urls/segments_encoded_view/2conversion.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>segments_encoded_view&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/segments_encoded_view/operator_assign.adoc</anchorfile>
            <anchor/>
            <arglist>(const segments_encoded_view&amp; )</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>segments_encoded_view</name>
            <anchorfile>boost/urls/segments_encoded_view/2constructor-0c.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>segments_encoded_view</name>
            <anchorfile>boost/urls/segments_encoded_view/2constructor-0b.adoc</anchorfile>
            <anchor/>
            <arglist>(const segments_encoded_view&amp; )</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>segments_encoded_view</name>
            <anchorfile>boost/urls/segments_encoded_view/2constructor-02.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::segments_ref</name>
        <filename>boost/urls/segments_ref.adoc</filename>
        <member kind="function">
            <type>void</type>
            <name>assign</name>
            <anchorfile>boost/urls/segments_ref/assign-08.adoc</anchorfile>
            <anchor/>
            <arglist>(std::initializer_list&lt;core::string_view&gt; init)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>assign</name>
            <anchorfile>boost/urls/segments_ref/assign-0d.adoc</anchorfile>
            <anchor/>
            <arglist>(FwdIt first, FwdIt last)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>clear</name>
            <anchorfile>boost/urls/segments_ref/clear.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>erase</name>
            <anchorfile>boost/urls/segments_ref/erase-0af2.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator pos)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>erase</name>
            <anchorfile>boost/urls/segments_ref/erase-0af5.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator first, iterator last)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>insert</name>
            <anchorfile>boost/urls/segments_ref/insert-05.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator before, core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>insert</name>
            <anchorfile>boost/urls/segments_ref/insert-09.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator before, std::initializer_list&lt;core::string_view&gt; init)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>insert</name>
            <anchorfile>boost/urls/segments_ref/insert-07.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator before, FwdIt first, FwdIt last)</arglist>
        </member>
        <member kind="function">
            <type>segments_view</type>
            <name>operator segments_view</name>
            <anchorfile>boost/urls/segments_ref/2conversion.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>segments_ref&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/segments_ref/operator_assign-0d.adoc</anchorfile>
            <anchor/>
            <arglist>(const segments_ref&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>segments_ref&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/segments_ref/operator_assign-08.adoc</anchorfile>
            <anchor/>
            <arglist>(const segments_view&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>segments_ref&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/segments_ref/operator_assign-0f.adoc</anchorfile>
            <anchor/>
            <arglist>(std::initializer_list&lt;core::string_view&gt; init)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>pop_back</name>
            <anchorfile>boost/urls/segments_ref/pop_back.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>push_back</name>
            <anchorfile>boost/urls/segments_ref/push_back.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>replace</name>
            <anchorfile>boost/urls/segments_ref/replace-05.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator pos, core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>replace</name>
            <anchorfile>boost/urls/segments_ref/replace-04.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator from, iterator to, core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>replace</name>
            <anchorfile>boost/urls/segments_ref/replace-02.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator from, iterator to, std::initializer_list&lt;core::string_view&gt; init)</arglist>
        </member>
        <member kind="function">
            <type>iterator</type>
            <name>replace</name>
            <anchorfile>boost/urls/segments_ref/replace-07.adoc</anchorfile>
            <anchor/>
            <arglist>(iterator from, iterator to, FwdIt first, FwdIt last)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>segments_ref</name>
            <anchorfile>boost/urls/segments_ref/2constructor.adoc</anchorfile>
            <anchor/>
            <arglist>(const segments_ref&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>url</name>
            <anchorfile>boost/urls/segments_ref/url.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::segments_view</name>
        <filename>boost/urls/segments_view.adoc</filename>
        <member kind="function">
            <type>segments_view&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/segments_view/operator_assign.adoc</anchorfile>
            <anchor/>
            <arglist>(const segments_view&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>segments_view</name>
            <anchorfile>boost/urls/segments_view/2constructor-0c.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>segments_view</name>
            <anchorfile>boost/urls/segments_view/2constructor-0d.adoc</anchorfile>
            <anchor/>
            <arglist>(const segments_view&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>segments_view</name>
            <anchorfile>boost/urls/segments_view/2constructor-0e.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::static_url</name>
        <filename>boost/urls/static_url.adoc</filename>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>normalize</name>
            <anchorfile>boost/urls/static_url/normalize.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>normalize_authority</name>
            <anchorfile>boost/urls/static_url/normalize_authority.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>normalize_fragment</name>
            <anchorfile>boost/urls/static_url/normalize_fragment.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>normalize_path</name>
            <anchorfile>boost/urls/static_url/normalize_path.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>normalize_query</name>
            <anchorfile>boost/urls/static_url/normalize_query.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>normalize_scheme</name>
            <anchorfile>boost/urls/static_url/normalize_scheme.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/static_url/operator_assign-07.adoc</anchorfile>
            <anchor/>
            <arglist>(const static_url&amp; u)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/static_url/operator_assign-0e.adoc</anchorfile>
            <anchor/>
            <arglist>(const url_view_base&amp; u)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>remove_authority</name>
            <anchorfile>boost/urls/static_url/remove_authority.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>remove_fragment</name>
            <anchorfile>boost/urls/static_url/remove_fragment.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>remove_origin</name>
            <anchorfile>boost/urls/static_url/remove_origin.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>remove_password</name>
            <anchorfile>boost/urls/static_url/remove_password.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>remove_port</name>
            <anchorfile>boost/urls/static_url/remove_port.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>remove_query</name>
            <anchorfile>boost/urls/static_url/remove_query.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>remove_scheme</name>
            <anchorfile>boost/urls/static_url/remove_scheme.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>remove_userinfo</name>
            <anchorfile>boost/urls/static_url/remove_userinfo.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>set_encoded_authority</name>
            <anchorfile>boost/urls/static_url/set_encoded_authority.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>set_encoded_fragment</name>
            <anchorfile>boost/urls/static_url/set_encoded_fragment.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>set_encoded_host</name>
            <anchorfile>boost/urls/static_url/set_encoded_host.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>set_encoded_host_address</name>
            <anchorfile>boost/urls/static_url/set_encoded_host_address.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>set_encoded_host_name</name>
            <anchorfile>boost/urls/static_url/set_encoded_host_name.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>set_encoded_password</name>
            <anchorfile>boost/urls/static_url/set_encoded_password.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>set_encoded_path</name>
            <anchorfile>boost/urls/static_url/set_encoded_path.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>set_encoded_query</name>
            <anchorfile>boost/urls/static_url/set_encoded_query.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>set_encoded_user</name>
            <anchorfile>boost/urls/static_url/set_encoded_user.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>set_encoded_userinfo</name>
            <anchorfile>boost/urls/static_url/set_encoded_userinfo.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>set_fragment</name>
            <anchorfile>boost/urls/static_url/set_fragment.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>set_host</name>
            <anchorfile>boost/urls/static_url/set_host.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>set_host_address</name>
            <anchorfile>boost/urls/static_url/set_host_address.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>set_host_ipv4</name>
            <anchorfile>boost/urls/static_url/set_host_ipv4.adoc</anchorfile>
            <anchor/>
            <arglist>(const ipv4_address&amp; addr)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>set_host_ipv6</name>
            <anchorfile>boost/urls/static_url/set_host_ipv6.adoc</anchorfile>
            <anchor/>
            <arglist>(const ipv6_address&amp; addr)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>set_host_ipvfuture</name>
            <anchorfile>boost/urls/static_url/set_host_ipvfuture.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>set_host_name</name>
            <anchorfile>boost/urls/static_url/set_host_name.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>set_params</name>
            <anchorfile>boost/urls/static_url/set_params.adoc</anchorfile>
            <anchor/>
            <arglist>(std::initializer_list&lt;param_view&gt; ps, encoding_opts opts)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>set_password</name>
            <anchorfile>boost/urls/static_url/set_password.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>set_path</name>
            <anchorfile>boost/urls/static_url/set_path.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>set_port</name>
            <anchorfile>boost/urls/static_url/set_port.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>set_port_number</name>
            <anchorfile>boost/urls/static_url/set_port_number.adoc</anchorfile>
            <anchor/>
            <arglist>(std::uint16_t n)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>set_query</name>
            <anchorfile>boost/urls/static_url/set_query.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>set_scheme</name>
            <anchorfile>boost/urls/static_url/set_scheme.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>set_scheme_id</name>
            <anchorfile>boost/urls/static_url/set_scheme_id.adoc</anchorfile>
            <anchor/>
            <arglist>(urls::scheme id)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>set_user</name>
            <anchorfile>boost/urls/static_url/set_user.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>static_url&amp;</type>
            <name>set_userinfo</name>
            <anchorfile>boost/urls/static_url/set_userinfo.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>static_url</name>
            <anchorfile>boost/urls/static_url/2constructor-06.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>static_url</name>
            <anchorfile>boost/urls/static_url/2constructor-08.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>static_url</name>
            <anchorfile>boost/urls/static_url/2constructor-00.adoc</anchorfile>
            <anchor/>
            <arglist>(const static_url&amp; u)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>static_url</name>
            <anchorfile>boost/urls/static_url/2constructor-09.adoc</anchorfile>
            <anchor/>
            <arglist>(const url_view_base&amp; u)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>~static_url</name>
            <anchorfile>boost/urls/static_url/2destructor.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::static_url_base</name>
        <filename>boost/urls/static_url_base.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::url</name>
        <filename>boost/urls/url.adoc</filename>
        <member kind="function">
            <type>url&amp;</type>
            <name>normalize</name>
            <anchorfile>boost/urls/url/normalize.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>normalize_authority</name>
            <anchorfile>boost/urls/url/normalize_authority.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>normalize_fragment</name>
            <anchorfile>boost/urls/url/normalize_fragment.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>normalize_path</name>
            <anchorfile>boost/urls/url/normalize_path.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>normalize_query</name>
            <anchorfile>boost/urls/url/normalize_query.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>normalize_scheme</name>
            <anchorfile>boost/urls/url/normalize_scheme.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/url/operator_assign-09.adoc</anchorfile>
            <anchor/>
            <arglist>(url&amp;&amp; u)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/url/operator_assign-0b.adoc</anchorfile>
            <anchor/>
            <arglist>(const url_view_base&amp; u)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/url/operator_assign-06.adoc</anchorfile>
            <anchor/>
            <arglist>(const url&amp; u)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>remove_authority</name>
            <anchorfile>boost/urls/url/remove_authority.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>remove_fragment</name>
            <anchorfile>boost/urls/url/remove_fragment.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>remove_origin</name>
            <anchorfile>boost/urls/url/remove_origin.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>remove_password</name>
            <anchorfile>boost/urls/url/remove_password.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>remove_port</name>
            <anchorfile>boost/urls/url/remove_port.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>remove_query</name>
            <anchorfile>boost/urls/url/remove_query.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>remove_scheme</name>
            <anchorfile>boost/urls/url/remove_scheme.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>remove_userinfo</name>
            <anchorfile>boost/urls/url/remove_userinfo.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_encoded_authority</name>
            <anchorfile>boost/urls/url/set_encoded_authority.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_encoded_fragment</name>
            <anchorfile>boost/urls/url/set_encoded_fragment.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_encoded_host</name>
            <anchorfile>boost/urls/url/set_encoded_host.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_encoded_host_address</name>
            <anchorfile>boost/urls/url/set_encoded_host_address.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_encoded_host_name</name>
            <anchorfile>boost/urls/url/set_encoded_host_name.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_encoded_params</name>
            <anchorfile>boost/urls/url/set_encoded_params.adoc</anchorfile>
            <anchor/>
            <arglist>(std::initializer_list&lt;param_pct_view&gt; ps)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_encoded_password</name>
            <anchorfile>boost/urls/url/set_encoded_password.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_encoded_path</name>
            <anchorfile>boost/urls/url/set_encoded_path.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_encoded_query</name>
            <anchorfile>boost/urls/url/set_encoded_query.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_encoded_user</name>
            <anchorfile>boost/urls/url/set_encoded_user.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_encoded_userinfo</name>
            <anchorfile>boost/urls/url/set_encoded_userinfo.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_fragment</name>
            <anchorfile>boost/urls/url/set_fragment.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_host</name>
            <anchorfile>boost/urls/url/set_host.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_host_address</name>
            <anchorfile>boost/urls/url/set_host_address.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_host_ipv4</name>
            <anchorfile>boost/urls/url/set_host_ipv4.adoc</anchorfile>
            <anchor/>
            <arglist>(const ipv4_address&amp; addr)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_host_ipv6</name>
            <anchorfile>boost/urls/url/set_host_ipv6.adoc</anchorfile>
            <anchor/>
            <arglist>(const ipv6_address&amp; addr)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_host_ipvfuture</name>
            <anchorfile>boost/urls/url/set_host_ipvfuture.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_host_name</name>
            <anchorfile>boost/urls/url/set_host_name.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_params</name>
            <anchorfile>boost/urls/url/set_params.adoc</anchorfile>
            <anchor/>
            <arglist>(std::initializer_list&lt;param_view&gt; ps, encoding_opts opts)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_password</name>
            <anchorfile>boost/urls/url/set_password.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_path</name>
            <anchorfile>boost/urls/url/set_path.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_port</name>
            <anchorfile>boost/urls/url/set_port.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_port_number</name>
            <anchorfile>boost/urls/url/set_port_number.adoc</anchorfile>
            <anchor/>
            <arglist>(std::uint16_t n)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_query</name>
            <anchorfile>boost/urls/url/set_query.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_scheme</name>
            <anchorfile>boost/urls/url/set_scheme.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_scheme_id</name>
            <anchorfile>boost/urls/url/set_scheme_id.adoc</anchorfile>
            <anchor/>
            <arglist>(urls::scheme id)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_user</name>
            <anchorfile>boost/urls/url/set_user.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url&amp;</type>
            <name>set_userinfo</name>
            <anchorfile>boost/urls/url/set_userinfo.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>swap</name>
            <anchorfile>boost/urls/url/swap.adoc</anchorfile>
            <anchor/>
            <arglist>(url&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>url</name>
            <anchorfile>boost/urls/url/2constructor-0f0.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>url</name>
            <anchorfile>boost/urls/url/2constructor-002.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>url</name>
            <anchorfile>boost/urls/url/2constructor-01.adoc</anchorfile>
            <anchor/>
            <arglist>(url&amp;&amp; u)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>url</name>
            <anchorfile>boost/urls/url/2constructor-001.adoc</anchorfile>
            <anchor/>
            <arglist>(const url_view_base&amp; u)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>url</name>
            <anchorfile>boost/urls/url/2constructor-0f7.adoc</anchorfile>
            <anchor/>
            <arglist>(const url&amp; u)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>~url</name>
            <anchorfile>boost/urls/url/2destructor.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::url_base</name>
        <filename>boost/urls/url_base.adoc</filename>
        <member kind="function">
            <type>const char*</type>
            <name>c_str</name>
            <anchorfile>boost/urls/url_base/c_str.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>std::size_t</type>
            <name>capacity</name>
            <anchorfile>boost/urls/url_base/capacity.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>clear</name>
            <anchorfile>boost/urls/url_base/clear.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>params_encoded_view</type>
            <name>encoded_params</name>
            <anchorfile>boost/urls/url_base/encoded_params-02.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>params_encoded_ref</type>
            <name>encoded_params</name>
            <anchorfile>boost/urls/url_base/encoded_params-06.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>segments_encoded_ref</type>
            <name>encoded_segments</name>
            <anchorfile>boost/urls/url_base/encoded_segments-0e8.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>segments_encoded_view</type>
            <name>encoded_segments</name>
            <anchorfile>boost/urls/url_base/encoded_segments-0e5.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>normalize</name>
            <anchorfile>boost/urls/url_base/normalize.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>normalize_authority</name>
            <anchorfile>boost/urls/url_base/normalize_authority.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>normalize_fragment</name>
            <anchorfile>boost/urls/url_base/normalize_fragment.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>normalize_path</name>
            <anchorfile>boost/urls/url_base/normalize_path.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>normalize_query</name>
            <anchorfile>boost/urls/url_base/normalize_query.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>normalize_scheme</name>
            <anchorfile>boost/urls/url_base/normalize_scheme.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>params_ref</type>
            <name>params</name>
            <anchorfile>boost/urls/url_base/params-03.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>params_view</type>
            <name>params</name>
            <anchorfile>boost/urls/url_base/params-0b.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>params_ref</type>
            <name>params</name>
            <anchorfile>boost/urls/url_base/params-0c.adoc</anchorfile>
            <anchor/>
            <arglist>(encoding_opts opt)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>remove_authority</name>
            <anchorfile>boost/urls/url_base/remove_authority.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>remove_fragment</name>
            <anchorfile>boost/urls/url_base/remove_fragment.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>remove_origin</name>
            <anchorfile>boost/urls/url_base/remove_origin.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>remove_password</name>
            <anchorfile>boost/urls/url_base/remove_password.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>remove_port</name>
            <anchorfile>boost/urls/url_base/remove_port.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>remove_query</name>
            <anchorfile>boost/urls/url_base/remove_query.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>remove_scheme</name>
            <anchorfile>boost/urls/url_base/remove_scheme.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>remove_userinfo</name>
            <anchorfile>boost/urls/url_base/remove_userinfo.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>reserve</name>
            <anchorfile>boost/urls/url_base/reserve.adoc</anchorfile>
            <anchor/>
            <arglist>(std::size_t n)</arglist>
        </member>
        <member kind="function">
            <type>system::result&lt;void&gt;</type>
            <name>resolve</name>
            <anchorfile>boost/urls/url_base/resolve.adoc</anchorfile>
            <anchor/>
            <arglist>(const url_view_base&amp; ref)</arglist>
        </member>
        <member kind="function">
            <type>urls::segments_ref</type>
            <name>segments</name>
            <anchorfile>boost/urls/url_base/segments-0e.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>segments_view</type>
            <name>segments</name>
            <anchorfile>boost/urls/url_base/segments-04.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_encoded_authority</name>
            <anchorfile>boost/urls/url_base/set_encoded_authority.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_encoded_fragment</name>
            <anchorfile>boost/urls/url_base/set_encoded_fragment.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_encoded_host</name>
            <anchorfile>boost/urls/url_base/set_encoded_host.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_encoded_host_address</name>
            <anchorfile>boost/urls/url_base/set_encoded_host_address.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_encoded_host_name</name>
            <anchorfile>boost/urls/url_base/set_encoded_host_name.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_encoded_params</name>
            <anchorfile>boost/urls/url_base/set_encoded_params.adoc</anchorfile>
            <anchor/>
            <arglist>(std::initializer_list&lt;param_pct_view&gt; ps)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_encoded_password</name>
            <anchorfile>boost/urls/url_base/set_encoded_password.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_encoded_path</name>
            <anchorfile>boost/urls/url_base/set_encoded_path.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_encoded_query</name>
            <anchorfile>boost/urls/url_base/set_encoded_query.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_encoded_user</name>
            <anchorfile>boost/urls/url_base/set_encoded_user.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_encoded_userinfo</name>
            <anchorfile>boost/urls/url_base/set_encoded_userinfo.adoc</anchorfile>
            <anchor/>
            <arglist>(pct_string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_fragment</name>
            <anchorfile>boost/urls/url_base/set_fragment.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_host</name>
            <anchorfile>boost/urls/url_base/set_host.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_host_address</name>
            <anchorfile>boost/urls/url_base/set_host_address.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_host_ipv4</name>
            <anchorfile>boost/urls/url_base/set_host_ipv4.adoc</anchorfile>
            <anchor/>
            <arglist>(const ipv4_address&amp; addr)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_host_ipv6</name>
            <anchorfile>boost/urls/url_base/set_host_ipv6.adoc</anchorfile>
            <anchor/>
            <arglist>(const ipv6_address&amp; addr)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_host_ipvfuture</name>
            <anchorfile>boost/urls/url_base/set_host_ipvfuture.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_host_name</name>
            <anchorfile>boost/urls/url_base/set_host_name.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_params</name>
            <anchorfile>boost/urls/url_base/set_params.adoc</anchorfile>
            <anchor/>
            <arglist>(std::initializer_list&lt;param_view&gt; ps, encoding_opts opts)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_password</name>
            <anchorfile>boost/urls/url_base/set_password.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_path</name>
            <anchorfile>boost/urls/url_base/set_path.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>set_path_absolute</name>
            <anchorfile>boost/urls/url_base/set_path_absolute.adoc</anchorfile>
            <anchor/>
            <arglist>(bool absolute)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_port</name>
            <anchorfile>boost/urls/url_base/set_port.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_port_number</name>
            <anchorfile>boost/urls/url_base/set_port_number.adoc</anchorfile>
            <anchor/>
            <arglist>(std::uint16_t n)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_query</name>
            <anchorfile>boost/urls/url_base/set_query.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_scheme</name>
            <anchorfile>boost/urls/url_base/set_scheme.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_scheme_id</name>
            <anchorfile>boost/urls/url_base/set_scheme_id.adoc</anchorfile>
            <anchor/>
            <arglist>(urls::scheme id)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_user</name>
            <anchorfile>boost/urls/url_base/set_user.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>url_base&amp;</type>
            <name>set_userinfo</name>
            <anchorfile>boost/urls/url_base/set_userinfo.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::url_view</name>
        <filename>boost/urls/url_view.adoc</filename>
        <member kind="function">
            <type>std::size_t</type>
            <name>max_size</name>
            <anchorfile>boost/urls/url_view/max_size.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>url_view&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/url_view/operator_assign-02.adoc</anchorfile>
            <anchor/>
            <arglist>(const url_view&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>url_view&amp;</type>
            <name>operator=</name>
            <anchorfile>boost/urls/url_view/operator_assign-0f.adoc</anchorfile>
            <anchor/>
            <arglist>(const url_view_base&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>url_view</name>
            <anchorfile>boost/urls/url_view/2constructor-0c.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>url_view</name>
            <anchorfile>boost/urls/url_view/2constructor-025.adoc</anchorfile>
            <anchor/>
            <arglist>(core::string_view s)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>url_view</name>
            <anchorfile>boost/urls/url_view/2constructor-024.adoc</anchorfile>
            <anchor/>
            <arglist>(const url_view&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>url_view</name>
            <anchorfile>boost/urls/url_view/2constructor-0a.adoc</anchorfile>
            <anchor/>
            <arglist>(const url_view_base&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>url_view</name>
            <anchorfile>boost/urls/url_view/2constructor-00.adoc</anchorfile>
            <anchor/>
            <arglist>(const String&amp; s)</arglist>
        </member>
        <member kind="function">
            <type>void</type>
            <name>~url_view</name>
            <anchorfile>boost/urls/url_view/2destructor.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::url_view_base</name>
        <filename>boost/urls/url_view_base.adoc</filename>
        <member kind="function">
            <type>authority_view</type>
            <name>authority</name>
            <anchorfile>boost/urls/url_view_base/authority.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>core::string_view</type>
            <name>buffer</name>
            <anchorfile>boost/urls/url_view_base/buffer.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>int</type>
            <name>compare</name>
            <anchorfile>boost/urls/url_view_base/compare.adoc</anchorfile>
            <anchor/>
            <arglist>(const url_view_base&amp; other)</arglist>
        </member>
        <member kind="function">
            <type>const char*</type>
            <name>data</name>
            <anchorfile>boost/urls/url_view_base/data.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>std::size_t</type>
            <name>digest</name>
            <anchorfile>boost/urls/url_view_base/digest.adoc</anchorfile>
            <anchor/>
            <arglist>(std::size_t salt)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>boost/urls/url_view_base/empty.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>encoded_authority</name>
            <anchorfile>boost/urls/url_view_base/encoded_authority.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>encoded_fragment</name>
            <anchorfile>boost/urls/url_view_base/encoded_fragment.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>encoded_host</name>
            <anchorfile>boost/urls/url_view_base/encoded_host.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>encoded_host_address</name>
            <anchorfile>boost/urls/url_view_base/encoded_host_address.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>encoded_host_and_port</name>
            <anchorfile>boost/urls/url_view_base/encoded_host_and_port.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>encoded_host_name</name>
            <anchorfile>boost/urls/url_view_base/encoded_host_name.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>encoded_origin</name>
            <anchorfile>boost/urls/url_view_base/encoded_origin.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>params_encoded_view</type>
            <name>encoded_params</name>
            <anchorfile>boost/urls/url_view_base/encoded_params.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>encoded_password</name>
            <anchorfile>boost/urls/url_view_base/encoded_password.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>encoded_path</name>
            <anchorfile>boost/urls/url_view_base/encoded_path.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>encoded_query</name>
            <anchorfile>boost/urls/url_view_base/encoded_query.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>encoded_resource</name>
            <anchorfile>boost/urls/url_view_base/encoded_resource.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>segments_encoded_view</type>
            <name>encoded_segments</name>
            <anchorfile>boost/urls/url_view_base/encoded_segments.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>encoded_target</name>
            <anchorfile>boost/urls/url_view_base/encoded_target.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>encoded_user</name>
            <anchorfile>boost/urls/url_view_base/encoded_user.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>encoded_userinfo</name>
            <anchorfile>boost/urls/url_view_base/encoded_userinfo.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>pct_string_view</type>
            <name>encoded_zone_id</name>
            <anchorfile>boost/urls/url_view_base/encoded_zone_id.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>StringToken::result_type</type>
            <name>fragment</name>
            <anchorfile>boost/urls/url_view_base/fragment.adoc</anchorfile>
            <anchor/>
            <arglist>(StringToken&amp;&amp; token)</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>has_authority</name>
            <anchorfile>boost/urls/url_view_base/has_authority.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>has_fragment</name>
            <anchorfile>boost/urls/url_view_base/has_fragment.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>has_password</name>
            <anchorfile>boost/urls/url_view_base/has_password.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>has_port</name>
            <anchorfile>boost/urls/url_view_base/has_port.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>has_query</name>
            <anchorfile>boost/urls/url_view_base/has_query.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>has_scheme</name>
            <anchorfile>boost/urls/url_view_base/has_scheme.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>has_userinfo</name>
            <anchorfile>boost/urls/url_view_base/has_userinfo.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>StringToken::result_type</type>
            <name>host</name>
            <anchorfile>boost/urls/url_view_base/host.adoc</anchorfile>
            <anchor/>
            <arglist>(StringToken&amp;&amp; token)</arglist>
        </member>
        <member kind="function">
            <type>StringToken::result_type</type>
            <name>host_address</name>
            <anchorfile>boost/urls/url_view_base/host_address.adoc</anchorfile>
            <anchor/>
            <arglist>(StringToken&amp;&amp; token)</arglist>
        </member>
        <member kind="function">
            <type>ipv4_address</type>
            <name>host_ipv4_address</name>
            <anchorfile>boost/urls/url_view_base/host_ipv4_address.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>ipv6_address</type>
            <name>host_ipv6_address</name>
            <anchorfile>boost/urls/url_view_base/host_ipv6_address.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>core::string_view</type>
            <name>host_ipvfuture</name>
            <anchorfile>boost/urls/url_view_base/host_ipvfuture.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>StringToken::result_type</type>
            <name>host_name</name>
            <anchorfile>boost/urls/url_view_base/host_name.adoc</anchorfile>
            <anchor/>
            <arglist>(StringToken&amp;&amp; token)</arglist>
        </member>
        <member kind="function">
            <type>urls::host_type</type>
            <name>host_type</name>
            <anchorfile>boost/urls/url_view_base/host_type.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>bool</type>
            <name>is_path_absolute</name>
            <anchorfile>boost/urls/url_view_base/is_path_absolute.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>std::size_t</type>
            <name>max_size</name>
            <anchorfile>boost/urls/url_view_base/max_size.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>core::string_view</type>
            <name>operator basic_string_view&lt;char&gt;</name>
            <anchorfile>boost/urls/url_view_base/2conversion.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>params_view</type>
            <name>params</name>
            <anchorfile>boost/urls/url_view_base/params-06.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>params_view</type>
            <name>params</name>
            <anchorfile>boost/urls/url_view_base/params-05.adoc</anchorfile>
            <anchor/>
            <arglist>(encoding_opts opt)</arglist>
        </member>
        <member kind="function">
            <type>StringToken::result_type</type>
            <name>password</name>
            <anchorfile>boost/urls/url_view_base/password.adoc</anchorfile>
            <anchor/>
            <arglist>(StringToken&amp;&amp; token)</arglist>
        </member>
        <member kind="function">
            <type>StringToken::result_type</type>
            <name>path</name>
            <anchorfile>boost/urls/url_view_base/path.adoc</anchorfile>
            <anchor/>
            <arglist>(StringToken&amp;&amp; token)</arglist>
        </member>
        <member kind="function">
            <type>std::shared_ptr&lt;const url_view&gt;</type>
            <name>persist</name>
            <anchorfile>boost/urls/url_view_base/persist.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>core::string_view</type>
            <name>port</name>
            <anchorfile>boost/urls/url_view_base/port.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>std::uint16_t</type>
            <name>port_number</name>
            <anchorfile>boost/urls/url_view_base/port_number.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>StringToken::result_type</type>
            <name>query</name>
            <anchorfile>boost/urls/url_view_base/query.adoc</anchorfile>
            <anchor/>
            <arglist>(StringToken&amp;&amp; token)</arglist>
        </member>
        <member kind="function">
            <type>core::string_view</type>
            <name>scheme</name>
            <anchorfile>boost/urls/url_view_base/scheme.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>urls::scheme</type>
            <name>scheme_id</name>
            <anchorfile>boost/urls/url_view_base/scheme_id.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>segments_view</type>
            <name>segments</name>
            <anchorfile>boost/urls/url_view_base/segments.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>std::size_t</type>
            <name>size</name>
            <anchorfile>boost/urls/url_view_base/size.adoc</anchorfile>
            <anchor/>
            <arglist>()</arglist>
        </member>
        <member kind="function">
            <type>StringToken::result_type</type>
            <name>user</name>
            <anchorfile>boost/urls/url_view_base/user.adoc</anchorfile>
            <anchor/>
            <arglist>(StringToken&amp;&amp; token)</arglist>
        </member>
        <member kind="function">
            <type>StringToken::result_type</type>
            <name>userinfo</name>
            <anchorfile>boost/urls/url_view_base/userinfo.adoc</anchorfile>
            <anchor/>
            <arglist>(StringToken&amp;&amp; token)</arglist>
        </member>
        <member kind="function">
            <type>StringToken::result_type</type>
            <name>zone_id</name>
            <anchorfile>boost/urls/url_view_base/zone_id.adoc</anchorfile>
            <anchor/>
            <arglist>(StringToken&amp;&amp; token)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>boost::urls::error</name>
        <filename>boost/urls/error.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::host_type</name>
        <filename>boost/urls/host_type.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::scheme</name>
        <filename>boost/urls/scheme.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::format_arg</name>
        <filename>boost/urls/format_arg.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::named_arg</name>
        <filename>boost/urls/named_arg.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::optional</name>
        <filename>boost/urls/optional.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::string_view</name>
        <filename>boost/urls/string_view.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::variant</name>
        <filename>boost/urls/variant.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::absolute_uri_rule</name>
        <filename>boost/urls/absolute_uri_rule.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::authority_rule</name>
        <filename>boost/urls/authority_rule.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::gen_delim_chars</name>
        <filename>boost/urls/gen_delim_chars.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::ignore_case</name>
        <filename>boost/urls/ignore_case.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::ipv4_address_rule</name>
        <filename>boost/urls/ipv4_address_rule.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::ipv6_address_rule</name>
        <filename>boost/urls/ipv6_address_rule.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::no_value</name>
        <filename>boost/urls/no_value.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::origin_form_rule</name>
        <filename>boost/urls/origin_form_rule.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::pchars</name>
        <filename>boost/urls/pchars.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::query_rule</name>
        <filename>boost/urls/query_rule.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::relative_ref_rule</name>
        <filename>boost/urls/relative_ref_rule.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::reserved_chars</name>
        <filename>boost/urls/reserved_chars.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::sub_delim_chars</name>
        <filename>boost/urls/sub_delim_chars.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::unreserved_chars</name>
        <filename>boost/urls/unreserved_chars.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::uri_reference_rule</name>
        <filename>boost/urls/uri_reference_rule.adoc</filename>
    </compound>
    <compound kind="class">
        <name>boost::urls::uri_rule</name>
        <filename>boost/urls/uri_rule.adoc</filename>
    </compound>
</tagfile>
